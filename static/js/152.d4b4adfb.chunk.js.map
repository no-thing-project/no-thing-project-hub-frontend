{"version":3,"file":"static/js/152.d4b4adfb.chunk.js","mappings":"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","sources":["pages/GatesPage.jsx","components/Common/EntityGrid.jsx"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Add } from '@mui/icons-material';\nimport { debounce } from 'lodash';\nimport AppLayout from '../components/Layout/AppLayout';\nimport ProfileHeader from '../components/Headers/ProfileHeader';\nimport useAuth from '../hooks/useAuth';\nimport { useGates } from '../hooks/useGates';\nimport { useEntity } from '../hooks/useEntity';\nimport { useNotification } from '../context/NotificationContext';\nimport CardMain from '../components/Cards/CardMain';\nimport EntityGrid from '../components/Common/EntityGrid';\nimport EntityDialogs from '../components/Common/EntityDialogs';\nimport LoadingSkeleton from '../components/Common/LoadingSkeleton';\nimport { filterEntities } from '../utils/filterUtils';\nimport { DEFAULT_GATE } from '../constants/default';\nimport { GATE_FILTER_OPTIONS } from '../constants/filterOptions';\n\nconst ErrorBoundary = ({ children }) => {\n  const [hasError, setHasError] = useState(false);\n\n  const handleError = useCallback((error, errorInfo) => {\n    console.error('ErrorBoundary caught:', error, errorInfo);\n    setHasError(true);\n  }, []);\n\n  if (hasError) {\n    return <div>Something went wrong. Please try again later.</div>;\n  }\n\n  return children;\n};\n\nconst GatesPage = () => {\n  const navigate = useNavigate();\n  const { showNotification } = useNotification();\n  const { token, authData, handleLogout, isAuthenticated, loading: authLoading } = useAuth();\n  const {\n    gates,\n    pagination,\n    fetchGatesList,\n    createNewGate,\n    updateExistingGate,\n    deleteExistingGate,\n    addMemberToGate,\n    removeMemberFromGate,\n    updateMemberRole,\n    toggleFavoriteGate,\n    loading: gatesLoading,\n    error: gatesError,\n  } = useGates(token, handleLogout, navigate);\n\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [memberDialogOpen, setMemberDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedGateId, setSelectedGateId] = useState(null);\n  const [editingGate, setEditingGate] = useState(null);\n  const [gateToDelete, setGateToDelete] = useState(null);\n  const [popupGate, setPopupGate] = useState(DEFAULT_GATE);\n  const [quickFilter, setQuickFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const observer = useRef();\n  const lastGateElementRef = useCallback(\n    (node) => {\n      if (gatesLoading || !pagination.hasMore) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && pagination.hasMore) {\n          const controller = new AbortController();\n          fetchGatesList(\n            { page: pagination.page + 1, limit: pagination.limit },\n            controller.signal,\n            true,\n            (err) => {\n              if (err && err.name !== 'AbortError') {\n                showNotification(err.message || 'Failed to load more gates', 'error');\n              }\n            }\n          );\n          return () => controller.abort();\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [gatesLoading, pagination.hasMore, pagination.page, pagination.limit, fetchGatesList, showNotification]\n  );\n\n  const stableFetchGatesList = useMemo(\n    () => [\n      () =>\n        fetchGatesList({ page: 1, limit: pagination.limit }, null, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch gates', 'error');\n          }\n        }),\n    ],\n    [fetchGatesList, pagination.limit, showNotification]\n  );\n\n  const { isLoading, actionLoading, setActionLoading } = useEntity(\n    stableFetchGatesList,\n    token,\n    handleLogout,\n    navigate,\n    'gates'\n  );\n\n  const debouncedSetSearchQuery = useMemo(\n    () => debounce((value) => setSearchQuery(value), 300),\n    []\n  );\n\n  useEffect(() => {\n    if (gatesError) showNotification(gatesError, 'error');\n  }, [gatesError, showNotification]);\n\n  const filteredGates = useMemo(\n    () => filterEntities(gates, 'gates', quickFilter, searchQuery),\n    [gates, quickFilter, searchQuery]\n  );\n\n  const handleOpenCreate = useCallback(() => setCreateDialogOpen(true), []);\n  const handleCancelCreate = useCallback(() => {\n    setCreateDialogOpen(false);\n    setPopupGate(DEFAULT_GATE);\n  }, []);\n\n  const handleCreate = useCallback(async () => {\n    if (!popupGate.name.trim()) {\n      showNotification('Gate name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      const createdGate = await createNewGate(popupGate);\n      setCreateDialogOpen(false);\n      setPopupGate(DEFAULT_GATE);\n      showNotification('Gate created successfully!', 'success');\n      navigate(`/gate/${createdGate.gate_id}`);\n    } catch (err) {\n      showNotification(err.message || 'Failed to create gate', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [popupGate, createNewGate, navigate, showNotification, setActionLoading]);\n\n  const handleUpdate = useCallback(async () => {\n    if (!editingGate?.name.trim()) {\n      showNotification('Gate name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingGate(editingGate.gate_id, editingGate);\n      setEditDialogOpen(false);\n      setEditingGate(null);\n      showNotification('Gate updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update gate', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingGate, updateExistingGate, showNotification, setActionLoading]);\n\n  const handleDelete = useCallback(async () => {\n    if (!gateToDelete) return;\n    setActionLoading(true);\n    try {\n      await deleteExistingGate(gateToDelete);\n      setDeleteDialogOpen(false);\n      setGateToDelete(null);\n      showNotification('Gate deleted successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete gate', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [gateToDelete, deleteExistingGate, showNotification, setActionLoading]);\n\n  const handleAddMember = useCallback(\n    async (gateId, memberData) => {\n      setActionLoading(true);\n      try {\n        const gate = gates.find((g) => g.gate_id === gateId);\n        if (gate?.members?.length >= gate?.settings?.max_members) {\n          showNotification('Maximum member limit reached!', 'error');\n          return;\n        }\n        await addMemberToGate(gateId, memberData);\n        showNotification('Member added successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to add member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [addMemberToGate, showNotification, gates, setActionLoading]\n  );\n\n  const handleRemoveMember = useCallback(\n    async (gateId, username) => {\n      setActionLoading(true);\n      try {\n        await removeMemberFromGate(gateId, username);\n        showNotification('Member removed successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to remove member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [removeMemberFromGate, showNotification, setActionLoading]\n  );\n\n  const handleUpdateMemberRole = useCallback(\n    async (gateId, username, newRole) => {\n      setActionLoading(true);\n      try {\n        await updateMemberRole(gateId, username, newRole);\n        showNotification('Member role updated successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to update member role', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [updateMemberRole, showNotification, setActionLoading]\n  );\n\n  const handleOpenMemberDialog = useCallback((gateId) => {\n    setSelectedGateId(gateId);\n    setMemberDialogOpen(true);\n  }, []);\n\n  const handleSaveMembers = useCallback(() => {\n    setMemberDialogOpen(false);\n    setSelectedGateId(null);\n    showNotification('Members updated successfully!', 'success');\n  }, [showNotification]);\n\n  const handleCancelMemberDialog = useCallback(() => {\n    setMemberDialogOpen(false);\n    setSelectedGateId(null);\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    setQuickFilter('all');\n    setSearchQuery('');\n    debouncedSetSearchQuery.cancel();\n    fetchGatesList({ page: 1, reset: { visibility: true } }, null, false, (err) => {\n      if (err && err.name !== 'AbortError') {\n        showNotification(err.message || 'Failed to reset filters', 'error');\n      }\n    });\n  }, [debouncedSetSearchQuery, fetchGatesList, showNotification]);\n\n  const headerData = useMemo(\n    () => ({\n      type: 'page',\n      title: 'Gates',\n      titleAriaLabel: 'Gates page',\n      shortDescription: 'Your Space for Big Ideas',\n      tooltipDescription:\n        'Gates are like forum topics, starting points for broad discussions. Create a Gate to spark a conversation or join one to explore shared interests.',\n      actions: [\n        {\n          label: 'Create Gate',\n          icon: <Add />,\n          onClick: handleOpenCreate,\n          tooltip: 'Create a new gate',\n          disabled: actionLoading || gatesLoading,\n          ariaLabel: 'Create a new gate',\n        },\n      ],\n    }),\n    [handleOpenCreate, actionLoading, gatesLoading]\n  );\n\n  if (authLoading || isLoading) {\n    return (\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <LoadingSkeleton />\n      </AppLayout>\n    );\n  }\n\n  if (!isAuthenticated) {\n    navigate('/login', { state: { from: window.location.pathname } });\n    return null;\n  }\n\n  return (\n    <ErrorBoundary>\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <ProfileHeader user={authData} isOwnProfile={true} headerData={headerData} />\n        <EntityGrid\n          type=\"gates\"\n          items={filteredGates}\n          cardComponent={CardMain}\n          itemKey=\"gate_id\"\n          quickFilter={quickFilter}\n          setQuickFilter={setQuickFilter}\n          searchQuery={searchQuery}\n          setSearchQuery={debouncedSetSearchQuery}\n          filterOptions={GATE_FILTER_OPTIONS}\n          onResetFilters={handleResetFilters}\n          handleFavorite={toggleFavoriteGate}\n          setEditingItem={(gate) => {\n            setEditingGate(gate);\n            setEditDialogOpen(true);\n          }}\n          setItemToDelete={setGateToDelete}\n          setDeleteDialogOpen={setDeleteDialogOpen}\n          handleManageMembers={handleOpenMemberDialog}\n          navigate={navigate}\n          currentUser={authData}\n          token={token}\n          onCreateNew={handleOpenCreate}\n          lastItemRef={lastGateElementRef}\n          hasMore={pagination.hasMore}\n          loading={gatesLoading}\n          disabled={actionLoading || gatesLoading}\n        />\n        <EntityDialogs\n          type=\"gates\"\n          createOpen={createDialogOpen}\n          editOpen={editDialogOpen}\n          deleteOpen={deleteDialogOpen}\n          memberOpen={memberDialogOpen}\n          item={popupGate}\n          setItem={setPopupGate}\n          editingItem={editingGate}\n          setEditingItem={setEditingGate}\n          itemToDelete={gateToDelete}\n          setItemToDelete={setGateToDelete}\n          onSaveCreate={handleCreate}\n          onSaveEdit={handleUpdate}\n          onCancelCreate={handleCancelCreate}\n          onCancelEdit={() => {\n            setEditDialogOpen(false);\n            setEditingGate(null);\n          }}\n          onConfirmDelete={handleDelete}\n          onCloseDelete={() => {\n            setDeleteDialogOpen(false);\n            setGateToDelete(null);\n          }}\n          selectedId={selectedGateId}\n          members={gates.find((g) => g.gate_id === selectedGateId)?.members || []}\n          addMember={handleAddMember}\n          removeMember={handleRemoveMember}\n          updateMemberRole={handleUpdateMemberRole}\n          onSaveMembers={handleSaveMembers}\n          onCancelMembers={handleCancelMemberDialog}\n          disabled={actionLoading || gatesLoading}\n          loading={actionLoading}\n          token={token}\n        />\n      </AppLayout>\n    </ErrorBoundary>\n  );\n};\n\nGatesPage.propTypes = {\n  token: PropTypes.string,\n  authData: PropTypes.shape({\n    id: PropTypes.number,\n    username: PropTypes.string,\n    avatar: PropTypes.string,\n  }),\n  handleLogout: PropTypes.func,\n  isAuthenticated: PropTypes.bool,\n  authLoading: PropTypes.bool,\n};\n\nexport default React.memo(GatesPage);","import React from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport Filters from '../Filters/Filters';\nimport Grids from '../Grids/Grids';\nimport { containerStyles } from '../../styles/BaseStyles';\n\nconst EntityGrid = ({\n  type,\n  items,\n  cardComponent: CardComponent,\n  itemKey,\n  quickFilter,\n  setQuickFilter,\n  searchQuery,\n  setSearchQuery,\n  filterOptions,\n  onResetFilters,\n  handleFavorite,\n  setEditingItem,\n  setItemToDelete,\n  setDeleteDialogOpen,\n  handleManageMembers,\n  navigate,\n  currentUser,\n  token,\n  onCreateNew,\n  disabled,\n  profileHeader,\n  lastItemRef,\n  hasMore,\n  loading,\n}) => {\n  return (\n    <Box sx={{ ...containerStyles, maxWidth: '1500px', mx: 'auto' }}>\n      {profileHeader}\n      <Filters\n        type={type}\n        quickFilter={quickFilter}\n        setQuickFilter={setQuickFilter}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        filterOptions={filterOptions}\n        onReset={onResetFilters}\n      />\n      <Grids\n        items={items}\n        cardComponent={CardComponent}\n        itemKey={itemKey}\n        gridType={type}\n        handleFavorite={handleFavorite}\n        setEditingItem={setEditingItem}\n        setItemToDelete={setItemToDelete}\n        setDeleteDialogOpen={setDeleteDialogOpen}\n        handleManageMembers={handleManageMembers}\n        navigate={navigate}\n        currentUser={currentUser}\n        token={token}\n        onCreateNew={onCreateNew}\n        disabled={disabled}\n        lastItemRef={lastItemRef}\n        hasMore={hasMore}\n      />\n      {loading && hasMore && (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n          <CircularProgress aria-label=\"Loading more items\" />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nEntityGrid.propTypes = {\n  type: PropTypes.string.isRequired,\n  items: PropTypes.array.isRequired,\n  cardComponent: PropTypes.elementType.isRequired,\n  itemKey: PropTypes.string.isRequired,\n  quickFilter: PropTypes.string.isRequired,\n  setQuickFilter: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ).isRequired,\n  onResetFilters: PropTypes.func.isRequired,\n  handleFavorite: PropTypes.func,\n  setEditingItem: PropTypes.func,\n  setItemToDelete: PropTypes.func,\n  setDeleteDialogOpen: PropTypes.func,\n  handleManageMembers: PropTypes.func,\n  navigate: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  token: PropTypes.string,\n  onCreateNew: PropTypes.func,\n  disabled: PropTypes.bool,\n  profileHeader: PropTypes.node,\n  lastItemRef: PropTypes.func,\n  hasMore: PropTypes.bool,\n  loading: PropTypes.bool,\n};\n\nexport default React.memo(EntityGrid);"],"names":["ErrorBoundary","_ref","children","hasError","setHasError","useState","useCallback","error","errorInfo","console","_jsx","GatesPage","_gates$find","navigate","useNavigate","showNotification","useNotification","token","authData","handleLogout","isAuthenticated","loading","authLoading","useAuth","gates","pagination","fetchGatesList","createNewGate","updateExistingGate","deleteExistingGate","addMemberToGate","removeMemberFromGate","updateMemberRole","toggleFavoriteGate","gatesLoading","gatesError","useGates","createDialogOpen","setCreateDialogOpen","editDialogOpen","setEditDialogOpen","memberDialogOpen","setMemberDialogOpen","deleteDialogOpen","setDeleteDialogOpen","selectedGateId","setSelectedGateId","editingGate","setEditingGate","gateToDelete","setGateToDelete","popupGate","setPopupGate","DEFAULT_GATE","quickFilter","setQuickFilter","searchQuery","setSearchQuery","observer","useRef","lastGateElementRef","node","hasMore","current","disconnect","IntersectionObserver","entries","isIntersecting","controller","AbortController","page","limit","signal","err","name","message","abort","observe","stableFetchGatesList","useMemo","isLoading","actionLoading","setActionLoading","useEntity","debouncedSetSearchQuery","debounce","value","useEffect","filteredGates","filterEntities","handleOpenCreate","handleCancelCreate","handleCreate","async","trim","createdGate","gate_id","handleUpdate","handleDelete","handleAddMember","gateId","memberData","_gate$members","_gate$settings","gate","find","g","members","length","settings","max_members","handleRemoveMember","username","handleUpdateMemberRole","newRole","handleOpenMemberDialog","handleSaveMembers","handleCancelMemberDialog","handleResetFilters","cancel","reset","visibility","headerData","type","title","titleAriaLabel","shortDescription","tooltipDescription","actions","label","icon","Add","onClick","tooltip","disabled","ariaLabel","AppLayout","currentUser","onLogout","LoadingSkeleton","_jsxs","ProfileHeader","user","isOwnProfile","EntityGrid","items","cardComponent","CardMain","itemKey","filterOptions","GATE_FILTER_OPTIONS","onResetFilters","handleFavorite","setEditingItem","setItemToDelete","handleManageMembers","onCreateNew","lastItemRef","EntityDialogs","createOpen","editOpen","deleteOpen","memberOpen","item","setItem","editingItem","itemToDelete","onSaveCreate","onSaveEdit","onCancelCreate","onCancelEdit","onConfirmDelete","onCloseDelete","selectedId","addMember","removeMember","onSaveMembers","onCancelMembers","state","from","window","location","pathname","React","CardComponent","profileHeader","Box","sx","containerStyles","maxWidth","mx","Filters","onReset","Grids","gridType","display","justifyContent","mt","CircularProgress"],"sourceRoot":""}