{"version":3,"file":"static/js/907.97b3f421.chunk.js","mappings":"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","sources":["pages/BoardsPage.jsx"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Add } from '@mui/icons-material';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/Layout/AppLayout';\nimport ProfileHeader from '../components/Headers/ProfileHeader';\nimport useAuth from '../hooks/useAuth';\nimport { useBoards } from '../hooks/useBoards';\nimport { useClasses } from '../hooks/useClasses';\nimport { useGates } from '../hooks/useGates';\nimport { useEntity } from '../hooks/useEntity';\nimport { useNotification } from '../context/NotificationContext';\nimport CardMain from '../components/Cards/CardMain';\nimport Filters from '../components/Filters/Filters';\nimport Grids from '../components/Grids/Grids';\nimport EntityDialogs from '../components/Common/EntityDialogs';\nimport LoadingSkeleton from '../components/Common/LoadingSkeleton';\nimport { filterEntities } from '../utils/filterUtils';\nimport { DEFAULT_BOARD } from '../constants/default';\nimport { BOARD_FILTER_OPTIONS } from '../constants/filterOptions';\n\nconst ErrorBoundary = ({ children }) => {\n  const [hasError, setHasError] = useState(false);\n\n  const handleError = useCallback((error, errorInfo) => {\n    console.error('ErrorBoundary caught:', error, errorInfo);\n    setHasError(true);\n  }, []);\n\n  if (hasError) {\n    return <div>Something went wrong. Please try again later.</div>;\n  }\n\n  return children;\n};\n\nconst BoardsPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { showNotification } = useNotification();\n  const { token, authData, handleLogout, isAuthenticated, loading: authLoading } = useAuth();\n  const {\n    boards,\n    pagination,\n    fetchBoardsList,\n    createNewBoard,\n    updateExistingBoard,\n    deleteExistingBoard,\n    addMemberToBoard,\n    removeMemberFromBoard,\n    updateMemberRole,\n    toggleFavoriteBoard,\n    loading: boardsLoading,\n    error: boardsError,\n  } = useBoards(token, handleLogout, navigate, false);\n  const { classes, fetchClassesList, loading: classesLoading, error: classesError } = useClasses(\n    token,\n    handleLogout,\n    navigate,\n    true\n  );\n  const { gates, fetchGatesList, loading: gatesLoading, error: gatesError } = useGates(\n    token,\n    handleLogout,\n    navigate,\n    true\n  );\n\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [memberDialogOpen, setMemberDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [editingBoard, setEditingBoard] = useState(null);\n  const [selectedBoardId, setSelectedBoardId] = useState(null);\n  const [boardToDelete, setBoardToDelete] = useState(null);\n  const [popupBoard, setPopupBoard] = useState(DEFAULT_BOARD);\n  const [quickFilter, setQuickFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const observer = useRef();\n  const lastBoardElementRef = useCallback(\n    (node) => {\n      if (boardsLoading || !pagination.hasMore) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && pagination.hasMore) {\n          const controller = new AbortController();\n          fetchBoardsList(\n            { visibility: quickFilter === 'all' ? undefined : quickFilter, page: pagination.page + 1 },\n            controller.signal,\n            true,\n            (err) => {\n              if (err && err.name !== 'AbortError') {\n                showNotification(err.message || 'Failed to load more boards', 'error');\n              }\n            }\n          );\n          return () => controller.abort();\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [boardsLoading, pagination.hasMore, pagination.page, quickFilter, fetchBoardsList, showNotification]\n  );\n\n  const stableFetchBoardsList = useMemo(\n    () => [\n      () =>\n        fetchBoardsList({ page: 1, limit: pagination.limit }, null, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch boards', 'error');\n          }\n        }),\n      () =>\n        fetchClassesList({ visibility: 'public' }, null, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch classes', 'error');\n          }\n        }),\n      () =>\n        fetchGatesList({ visibility: 'public' }, null, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch gates', 'error');\n          }\n        }),\n    ],\n    [fetchBoardsList, fetchClassesList, fetchGatesList, pagination.limit, showNotification]\n  );\n\n  const { isLoading, actionLoading, setActionLoading } = useEntity(\n    stableFetchBoardsList,\n    token,\n    handleLogout,\n    navigate,\n    'boards'\n  );\n\n  const debouncedSetSearchQuery = useMemo(\n    () => debounce((value) => setSearchQuery(value), 300),\n    []\n  );\n\n  useEffect(() => {\n    if (boardsError && boardsError !== 'canceled') {\n      showNotification(boardsError, 'error');\n    }\n    if (classesError && classesError !== 'canceled') {\n      showNotification(classesError, 'error');\n    }\n    if (gatesError && gatesError !== 'canceled') {\n      showNotification(gatesError, 'error');\n    }\n  }, [boardsError, classesError, gatesError, showNotification]);\n\n  const filteredBoards = useMemo(\n    () => filterEntities(boards || [], 'boards', quickFilter, searchQuery, gates || [], classes || []),\n    [boards, gates, classes, quickFilter, searchQuery]\n  );\n\n  useEffect(() => {\n    if (searchQuery || quickFilter !== 'all') {\n      const controller = new AbortController();\n      Promise.all([\n        fetchClassesList({ visibility: 'public' }, controller.signal, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch classes', 'error');\n          }\n        }),\n        fetchGatesList({ visibility: 'public' }, controller.signal, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch gates', 'error');\n          }\n        }),\n      ]).catch((err) => {\n        if (err.name !== 'AbortError') {\n          showNotification(err.message || 'Failed to fetch related data', 'error');\n        }\n      });\n      return () => controller.abort();\n    }\n  }, [searchQuery, quickFilter, fetchClassesList, fetchGatesList, showNotification]);\n\n  const handleOpenCreate = useCallback(() => setCreateDialogOpen(true), []);\n  const handleCancelCreate = useCallback(() => {\n    setCreateDialogOpen(false);\n    setPopupBoard(DEFAULT_BOARD);\n  }, []);\n\n  const handleCreate = useCallback(\n    async (gateId, classId) => {\n      if (!popupBoard.name?.trim()) {\n        showNotification('Board name is required!', 'error');\n        return;\n      }\n      setActionLoading(true);\n      try {\n        let createdBoard;\n        if (gateId) {\n          createdBoard = await createNewBoard({ ...popupBoard, gate_id: gateId });\n        } else if (classId) {\n          createdBoard = await createNewBoard({ ...popupBoard, class_id: classId });\n        } else {\n          createdBoard = await createNewBoard(popupBoard);\n        }\n        setCreateDialogOpen(false);\n        setPopupBoard(DEFAULT_BOARD);\n        showNotification('Board created successfully!', 'success');\n        navigate(`/board/${createdBoard.board_id}`);\n      } catch (err) {\n        showNotification(err.message || 'Failed to create board', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [popupBoard, createNewBoard, navigate, showNotification, setActionLoading]\n  );\n\n  const handleUpdate = useCallback(async () => {\n    if (!editingBoard?.name?.trim()) {\n      showNotification('Board name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingBoard(editingBoard.board_id, editingBoard);\n      setEditDialogOpen(false);\n      setEditingBoard(null);\n      showNotification('Board updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update board', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingBoard, updateExistingBoard, showNotification, setActionLoading]);\n\n  const handleDelete = useCallback(async () => {\n    if (!boardToDelete) return;\n    setActionLoading(true);\n    try {\n      await deleteExistingBoard(boardToDelete);\n      setDeleteDialogOpen(false);\n      setBoardToDelete(null);\n      showNotification('Board deleted successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete board', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [boardToDelete, deleteExistingBoard, showNotification, setActionLoading]);\n\n  const handleAddMember = useCallback(\n    async (boardId, memberData) => {\n      setActionLoading(true);\n      try {\n        const board = boards.find((b) => b.board_id === boardId);\n        if (board?.members?.length >= board?.settings?.max_members) {\n          showNotification('Maximum member limit reached!', 'error');\n          return;\n        }\n        await addMemberToBoard(boardId, memberData);\n        showNotification('Member added successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to add member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [addMemberToBoard, boards, showNotification, setActionLoading]\n  );\n\n  const handleRemoveMember = useCallback(\n    async (boardId, username) => {\n      setActionLoading(true);\n      try {\n        await removeMemberFromBoard(boardId, username);\n        showNotification('Member removed successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to remove member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [removeMemberFromBoard, showNotification, setActionLoading]\n  );\n\n  const handleUpdateMemberRole = useCallback(\n    async (boardId, username, newRole) => {\n      setActionLoading(true);\n      try {\n        await updateMemberRole(boardId, username, newRole);\n        showNotification('Member role updated successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to update member role', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [updateMemberRole, showNotification, setActionLoading]\n  );\n\n  const handleOpenMemberDialog = useCallback((boardId) => {\n    setSelectedBoardId(boardId);\n    setMemberDialogOpen(true);\n  }, []);\n\n  const handleSaveMembers = useCallback(() => {\n    setMemberDialogOpen(false);\n    setSelectedBoardId(null);\n    showNotification('Members updated successfully!', 'success');\n  }, [showNotification]);\n\n  const handleCancelMemberDialog = useCallback(() => {\n    setMemberDialogOpen(false);\n    setSelectedBoardId(null);\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    setQuickFilter('all');\n    setSearchQuery('');\n    debouncedSetSearchQuery.cancel();\n    fetchBoardsList({ page: 1, reset: { visibility: true } }, null, false, (err) => {\n      if (err && err.name !== 'AbortError') {\n        showNotification(err.message || 'Failed to reset filters', 'error');\n      }\n    });\n  }, [debouncedSetSearchQuery, fetchBoardsList, showNotification]);\n\n  const headerData = useMemo(\n    () => ({\n      type: 'page',\n      title: 'Boards',\n      titleAriaLabel: 'Boards page',\n      shortDescription: 'Your Spaces for Collaboration',\n      tooltipDescription:\n        'Boards are interactive spaces for discussions and tasks within classes or gates. Create a board to organize your projects or collaborate with others.',\n      actions: isAuthenticated\n        ? [\n            {\n              label: 'Create Board',\n              icon: <Add />,\n              onClick: handleOpenCreate,\n              tooltip: 'Create a new board',\n              disabled: actionLoading || boardsLoading || classesLoading || gatesLoading,\n              ariaLabel: 'Create a new board',\n            },\n          ]\n        : [],\n    }),\n    [isAuthenticated, handleOpenCreate, actionLoading, boardsLoading, classesLoading, gatesLoading]\n  );\n\n  if (authLoading || isLoading) {\n    return (\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <LoadingSkeleton />\n      </AppLayout>\n    );\n  }\n\n  if (!isAuthenticated) {\n    navigate('/login', { state: { from: location.pathname } });\n    return null;\n  }\n\n  return (\n    <ErrorBoundary>\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <ProfileHeader user={authData} isOwnProfile={true} headerData={headerData} />\n        <Filters\n          type=\"boards\"\n          quickFilter={quickFilter}\n          setQuickFilter={setQuickFilter}\n          searchQuery={searchQuery}\n          setSearchQuery={debouncedSetSearchQuery}\n          filterOptions={BOARD_FILTER_OPTIONS}\n          onReset={handleResetFilters}\n        />\n        <Grids\n          items={filteredBoards}\n          cardComponent={CardMain}\n          itemKey=\"board_id\"\n          gridType=\"boards\"\n          handleFavorite={toggleFavoriteBoard}\n          setEditingItem={(board) => {\n            setEditingBoard(board);\n            setEditDialogOpen(true);\n          }}\n          setItemToDelete={setBoardToDelete}\n          setDeleteDialogOpen={setDeleteDialogOpen}\n          handleManageMembers={handleOpenMemberDialog}\n          navigate={navigate}\n          currentUser={authData}\n          token={token}\n          onCreateNew={handleOpenCreate}\n          lastItemRef={lastBoardElementRef}\n          hasMore={pagination.hasMore}\n          loading={boardsLoading}\n          disabled={actionLoading || boardsLoading || classesLoading || gatesLoading}\n        />\n        <EntityDialogs\n          type=\"boards\"\n          createOpen={createDialogOpen}\n          editOpen={editDialogOpen}\n          deleteOpen={deleteDialogOpen}\n          memberOpen={memberDialogOpen}\n          item={popupBoard}\n          setItem={setPopupBoard}\n          editingItem={editingBoard}\n          setEditingItem={setEditingBoard}\n          itemToDelete={boardToDelete}\n          setItemToDelete={setBoardToDelete}\n          onSaveCreate={handleCreate}\n          onSaveEdit={handleUpdate}\n          onCancelCreate={handleCancelCreate}\n          onCancelEdit={() => {\n            setEditDialogOpen(false);\n            setEditingBoard(null);\n          }}\n          onConfirmDelete={handleDelete}\n          onCloseDelete={() => {\n            setDeleteDialogOpen(false);\n            setBoardToDelete(null);\n          }}\n          selectedId={selectedBoardId}\n          members={boards.find((b) => b.board_id === selectedBoardId)?.members || []}\n          addMember={handleAddMember}\n          removeMember={handleRemoveMember}\n          updateMemberRole={handleUpdateMemberRole}\n          onSaveMembers={handleSaveMembers}\n          onCancelMembers={handleCancelMemberDialog}\n          disabled={actionLoading || boardsLoading || classesLoading || gatesLoading}\n          loading={actionLoading}\n          token={token}\n          gates={gates}\n          classes={classes}\n        />\n      </AppLayout>\n    </ErrorBoundary>\n  );\n};\n\nBoardsPage.propTypes = {\n  token: PropTypes.string,\n  authData: PropTypes.shape({\n    id: PropTypes.number,\n    username: PropTypes.string,\n    avatar: PropTypes.string,\n    anonymous_id: PropTypes.string,\n  }),\n  handleLogout: PropTypes.func,\n  isAuthenticated: PropTypes.bool,\n  authLoading: PropTypes.bool,\n};\n\nexport default React.memo(BoardsPage);"],"names":["ErrorBoundary","_ref","children","hasError","setHasError","useState","useCallback","error","errorInfo","console","_jsx","BoardsPage","_boards$find","navigate","useNavigate","location","useLocation","showNotification","useNotification","token","authData","handleLogout","isAuthenticated","loading","authLoading","useAuth","boards","pagination","fetchBoardsList","createNewBoard","updateExistingBoard","deleteExistingBoard","addMemberToBoard","removeMemberFromBoard","updateMemberRole","toggleFavoriteBoard","boardsLoading","boardsError","useBoards","classes","fetchClassesList","classesLoading","classesError","useClasses","gates","fetchGatesList","gatesLoading","gatesError","useGates","createDialogOpen","setCreateDialogOpen","editDialogOpen","setEditDialogOpen","memberDialogOpen","setMemberDialogOpen","deleteDialogOpen","setDeleteDialogOpen","editingBoard","setEditingBoard","selectedBoardId","setSelectedBoardId","boardToDelete","setBoardToDelete","popupBoard","setPopupBoard","DEFAULT_BOARD","quickFilter","setQuickFilter","searchQuery","setSearchQuery","observer","useRef","lastBoardElementRef","node","hasMore","current","disconnect","IntersectionObserver","entries","isIntersecting","controller","AbortController","visibility","undefined","page","signal","err","name","message","abort","observe","stableFetchBoardsList","useMemo","limit","isLoading","actionLoading","setActionLoading","useEntity","debouncedSetSearchQuery","debounce","value","useEffect","filteredBoards","filterEntities","Promise","all","catch","handleOpenCreate","handleCancelCreate","handleCreate","async","gateId","classId","_popupBoard$name","trim","createdBoard","gate_id","class_id","board_id","handleUpdate","_editingBoard$name","handleDelete","handleAddMember","boardId","memberData","_board$members","_board$settings","board","find","b","members","length","settings","max_members","handleRemoveMember","username","handleUpdateMemberRole","newRole","handleOpenMemberDialog","handleSaveMembers","handleCancelMemberDialog","handleResetFilters","cancel","reset","headerData","type","title","titleAriaLabel","shortDescription","tooltipDescription","actions","label","icon","Add","onClick","tooltip","disabled","ariaLabel","AppLayout","currentUser","onLogout","LoadingSkeleton","_jsxs","ProfileHeader","user","isOwnProfile","Filters","filterOptions","BOARD_FILTER_OPTIONS","onReset","Grids","items","cardComponent","CardMain","itemKey","gridType","handleFavorite","setEditingItem","setItemToDelete","handleManageMembers","onCreateNew","lastItemRef","EntityDialogs","createOpen","editOpen","deleteOpen","memberOpen","item","setItem","editingItem","itemToDelete","onSaveCreate","onSaveEdit","onCancelCreate","onCancelEdit","onConfirmDelete","onCloseDelete","selectedId","addMember","removeMember","onSaveMembers","onCancelMembers","state","from","pathname","React"],"sourceRoot":""}