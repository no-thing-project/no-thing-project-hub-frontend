{"version":3,"file":"static/js/897.cc10b59e.chunk.js","mappings":"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","sources":["../node_modules/@mui/icons-material/esm/Home.js","pages/ClassPage.jsx","components/Common/EntityGrid.jsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\"\n}), 'Home');","import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Add, Public, Lock, People, Forum, Star, Home } from '@mui/icons-material';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport AppLayout from '../components/Layout/AppLayout';\nimport ProfileHeader from '../components/Headers/ProfileHeader';\nimport EntityGrid from '../components/Common/EntityGrid';\nimport EntityDialogs from '../components/Common/EntityDialogs';\nimport LoadingSkeleton from '../components/Common/LoadingSkeleton';\nimport CardMain from '../components/Cards/CardMain';\nimport useAuth from '../hooks/useAuth';\nimport { useClasses } from '../hooks/useClasses';\nimport { useBoards } from '../hooks/useBoards';\nimport { useGates } from '../hooks/useGates';\nimport { useEntity } from '../hooks/useEntity';\nimport { useNotification } from '../context/NotificationContext';\nimport { filterEntities } from '../utils/filterUtils';\nimport { DEFAULT_BOARD } from '../constants/default';\nimport { BOARD_FILTER_OPTIONS } from '../constants/filterOptions';\n\nconst ErrorBoundary = ({ children }) => {\n  const [hasError, setHasError] = useState(false);\n\n  const handleError = useCallback((error, errorInfo) => {\n    console.error('ErrorBoundary caught:', error, errorInfo);\n    setHasError(true);\n  }, []);\n\n  if (hasError) {\n    return <div>Something went wrong. Please try again later.</div>;\n  }\n\n  return children;\n};\n\nconst ClassPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { class_id } = useParams();\n  const { showNotification } = useNotification();\n  const { token, authData, handleLogout, isAuthenticated, loading: authLoading } = useAuth();\n  const {\n    classItem: classData,\n    members,\n    stats,\n    classes,\n    fetchClass,\n    fetchClassMembersList,\n    updateExistingClass,\n    deleteExistingClass,\n    addMemberToClass,\n    removeMemberFromClass,\n    updateMemberRole: updateClassMemberRole,\n    toggleFavoriteClass,\n    loading: classesLoading,\n    error: classError,\n  } = useClasses(token, handleLogout, navigate, true);\n  const {\n    boards,\n    pagination,\n    fetchBoardsByClass,\n    createNewBoard,\n    updateExistingBoard,\n    deleteExistingBoard,\n    addMemberToBoard,\n    removeMemberFromBoard,\n    updateMemberRole: updateBoardMemberRole,\n    toggleFavoriteBoard,\n    loading: boardsLoading,\n    error: boardsError,\n  } = useBoards(token, handleLogout, navigate, true);\n  const {\n    gates,\n    fetchGatesList,\n    loading: gatesLoading,\n    error: gatesError,\n  } = useGates(token, handleLogout, navigate, true);\n\n  const [createBoardDialogOpen, setCreateBoardDialogOpen] = useState(false);\n  const [editBoardDialogOpen, setEditBoardDialogOpen] = useState(false);\n  const [deleteBoardDialogOpen, setDeleteBoardDialogOpen] = useState(false);\n  const [memberBoardDialogOpen, setMemberBoardDialogOpen] = useState(false);\n  const [editClassDialogOpen, setEditClassDialogOpen] = useState(false);\n  const [deleteClassDialogOpen, setDeleteClassDialogOpen] = useState(false);\n  const [memberClassDialogOpen, setMemberClassDialogOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState(null);\n  const [editingBoard, setEditingBoard] = useState(null);\n  const [boardToDelete, setBoardToDelete] = useState(null);\n  const [selectedBoardId, setSelectedBoardId] = useState(null);\n  const [popupBoard, setPopupBoard] = useState({ ...DEFAULT_BOARD, class_id });\n  const [quickFilter, setQuickFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const observer = useRef();\n  const lastBoardElementRef = useCallback(\n    (node) => {\n      if (boardsLoading || !pagination.hasMore) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && pagination.hasMore) {\n          const controller = new AbortController();\n          fetchBoardsByClass(\n            class_id,\n            { visibility: quickFilter === 'all' ? undefined : quickFilter, page: pagination.page + 1 },\n            controller.signal,\n            true,\n            (err) => {\n              if (err && err.name !== 'AbortError') {\n                showNotification(err.message || 'Failed to load more boards', 'error');\n              }\n            }\n          );\n          return () => controller.abort();\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [boardsLoading, pagination.hasMore, pagination.page, quickFilter, class_id, fetchBoardsByClass, showNotification]\n  );\n\n  const debouncedSetSearchQuery = useMemo(\n    () => debounce((value) => setSearchQuery(value), 300),\n    []\n  );\n\n  const fetchFunctions = useMemo(\n    () => [\n      (signal) =>\n        fetchClass(class_id, signal, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch class', 'error');\n          }\n        }),\n      (signal) =>\n        fetchClassMembersList(class_id, signal, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch class members', 'error');\n          }\n        }),\n      (signal) =>\n        fetchBoardsByClass(\n          class_id,\n          { page: 1, limit: pagination.limit },\n          signal,\n          false,\n          (err) => {\n            if (err && err.name !== 'AbortError') {\n              showNotification(err.message || 'Failed to fetch boards', 'error');\n            }\n          }\n        ),\n      (signal) =>\n        fetchGatesList({ visibility: 'public' }, signal, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch gates', 'error');\n          }\n        }),\n    ],\n    [fetchClass, fetchClassMembersList, fetchBoardsByClass, fetchGatesList, class_id, pagination.limit, showNotification]\n  );\n\n  const { isLoading, actionLoading, setActionLoading } = useEntity(fetchFunctions, token, handleLogout, navigate, 'class');\n\n  useEffect(() => {\n    if (!class_id?.trim()) {\n      showNotification('Invalid class ID', 'error');\n      navigate('/classes');\n    }\n  }, [class_id, navigate, showNotification]);\n\n  useEffect(() => {\n    const errors = [classError, boardsError, gatesError].filter(Boolean);\n    errors.forEach((error) => {\n      if (error && error !== 'canceled') {\n        showNotification(error, 'error');\n      }\n    });\n  }, [classError, boardsError, gatesError, showNotification]);\n\n  useEffect(() => {\n    if (!editingClass && editClassDialogOpen) {\n      setEditClassDialogOpen(false);\n    }\n    if (!editingBoard && editBoardDialogOpen) {\n      setEditBoardDialogOpen(false);\n    }\n  }, [editingClass, editClassDialogOpen, editingBoard, editBoardDialogOpen]);\n\n  const filteredBoards = useMemo(\n    () => filterEntities(boards || [], 'boards', quickFilter, searchQuery, gates || [], classes || [], [{ class_id }]),\n    [boards, classes, gates, quickFilter, searchQuery, class_id]\n  );\n\n  const userRole = useMemo(\n    () => members?.find((m) => m.anonymous_id === authData?.anonymous_id)?.role || 'none',\n    [members, authData]\n  );\n  const gate = useMemo(() => gates.find((g) => g.gate_id === classData?.gate_id) || null, [gates, classData]);\n  const isOwner = classData?.creator_id === authData?.anonymous_id;\n  const canEdit = isOwner || userRole === 'admin';\n  const canDelete = isOwner;\n  const canCreateBoard = classData?.access?.is_public || userRole !== 'viewer';\n\n  const handleOpenCreateBoard = useCallback(() => setCreateBoardDialogOpen(true), []);\n  const handleCancelCreateBoard = useCallback(() => {\n    setCreateBoardDialogOpen(false);\n    setPopupBoard({ ...DEFAULT_BOARD, class_id });\n  }, [class_id]);\n\n  const handleCreateBoard = useCallback(async () => {\n    if (!popupBoard.name?.trim()) {\n      showNotification('Board name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      const createdBoard = await createNewBoard({ ...popupBoard, class_id });\n      setCreateBoardDialogOpen(false);\n      setPopupBoard({ ...DEFAULT_BOARD, class_id });\n      showNotification('Board created successfully!', 'success');\n      navigate(`/board/${createdBoard.board_id}`);\n    } catch (err) {\n      showNotification(err.message || 'Failed to create board', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [popupBoard, createNewBoard, class_id, navigate, showNotification, setActionLoading]);\n\n  const handleUpdateBoard = useCallback(async () => {\n    if (!editingBoard?.name?.trim()) {\n      showNotification('Board name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingBoard(editingBoard.board_id, editingBoard);\n      setEditBoardDialogOpen(false);\n      setEditingBoard(null);\n      showNotification('Board updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update board', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingBoard, updateExistingBoard, showNotification, setActionLoading]);\n\n  const handleDeleteBoard = useCallback(async () => {\n    if (!boardToDelete) return;\n    setActionLoading(true);\n    try {\n      await deleteExistingBoard(boardToDelete);\n      setDeleteBoardDialogOpen(false);\n      setBoardToDelete(null);\n      showNotification('Board deleted successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete board', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [boardToDelete, deleteExistingBoard, showNotification, setActionLoading]);\n\n  const handleUpdateClass = useCallback(async () => {\n    if (!editingClass?.name?.trim()) {\n      showNotification('Class name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingClass(editingClass.class_id, editingClass);\n      setEditClassDialogOpen(false);\n      setEditingClass(null);\n      showNotification('Class updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingClass, updateExistingClass, showNotification, setActionLoading]);\n\n  const handleDeleteClass = useCallback(async () => {\n    setActionLoading(true);\n    try {\n      await deleteExistingClass(class_id);\n      setDeleteClassDialogOpen(false);\n      showNotification('Class deleted successfully!', 'success');\n      navigate('/classes');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [class_id, deleteExistingClass, navigate, showNotification, setActionLoading]);\n\n  const handleFavoriteToggle = useCallback(async () => {\n    setActionLoading(true);\n    try {\n      await toggleFavoriteClass(class_id, classData?.is_favorited);\n      showNotification(\n        classData?.is_favorited ? 'Class removed from favorites!' : 'Class added to favorites!',\n        'success'\n      );\n    } catch (err) {\n      showNotification(err.message || 'Failed to toggle favorite', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [class_id, classData, toggleFavoriteClass, showNotification, setActionLoading]);\n\n  const handleAddMember = useCallback(\n    async (id, memberData, isBoard = false) => {\n      setActionLoading(true);\n      try {\n        const entity = isBoard\n          ? boards.find((b) => b.board_id === id)\n          : { members, settings: classData?.settings };\n        if (entity?.members?.length >= entity?.settings?.max_members) {\n          showNotification('Maximum member limit reached!', 'error');\n          return;\n        }\n        await (isBoard ? addMemberToBoard : addMemberToClass)(id, memberData);\n        showNotification('Member added successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to add member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [addMemberToBoard, addMemberToClass, boards, members, classData, showNotification, setActionLoading]\n  );\n\n  const handleRemoveMember = useCallback(\n    async (id, username, isBoard = false) => {\n      setActionLoading(true);\n      try {\n        await (isBoard ? removeMemberFromBoard : removeMemberFromClass)(id, username);\n        showNotification('Member removed successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to remove member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [removeMemberFromBoard, removeMemberFromClass, showNotification, setActionLoading]\n  );\n\n  const handleUpdateMemberRole = useCallback(\n    async (id, username, newRole, isBoard = false) => {\n      setActionLoading(true);\n      try {\n        await (isBoard ? updateBoardMemberRole : updateClassMemberRole)(id, username, newRole);\n        showNotification('Member role updated successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to update member role', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [updateBoardMemberRole, updateClassMemberRole, showNotification, setActionLoading]\n  );\n\n  const handleOpenClassMemberDialog = useCallback(() => {\n    setMemberClassDialogOpen(true);\n  }, []);\n\n  const handleOpenBoardMemberDialog = useCallback((boardId) => {\n    setSelectedBoardId(boardId);\n    setMemberBoardDialogOpen(true);\n  }, []);\n\n  const handleSaveMembers = useCallback(\n    (isBoard = false) => {\n      if (isBoard) {\n        setMemberBoardDialogOpen(false);\n        setSelectedBoardId(null);\n      } else {\n        setMemberClassDialogOpen(false);\n      }\n      showNotification('Members updated successfully!', 'success');\n    },\n    [showNotification]\n  );\n\n  const handleCancelBoardMemberDialog = useCallback(() => {\n    setMemberBoardDialogOpen(false);\n    setSelectedBoardId(null);\n  }, []);\n\n  const handleCancelClassMemberDialog = useCallback(() => {\n    setMemberClassDialogOpen(false);\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    setQuickFilter('all');\n    setSearchQuery('');\n    debouncedSetSearchQuery.cancel();\n    const controller = new AbortController();\n    fetchBoardsByClass(class_id, { page: 1, reset: { visibility: true } }, controller.signal, false, (err) => {\n      if (err && err.name !== 'AbortError') {\n        showNotification(err.message || 'Failed to reset filters', 'error');\n      }\n    });\n    return () => controller.abort();\n  }, [debouncedSetSearchQuery, fetchBoardsByClass, class_id, showNotification]);\n\n  const headerData = useMemo(\n    () => ({\n      type: 'class',\n      title: classData?.name || 'Untitled Class',\n      titleAriaLabel: `Class name: ${classData?.name || 'Untitled Class'}`,\n      description: classData?.description || 'No description provided',\n      descriptionAriaLabel: classData?.description ? `Class description: ${classData.description}` : undefined,\n      chips: [\n        {\n          label: gate?.name || 'No Gate',\n          icon: <Home />,\n          color: 'secondary',\n          ariaLabel: `Gate: ${gate?.name || 'No Gate'}`,\n          onClick: gate?.gate_id ? () => navigate(`/gate/${gate.gate_id}`) : undefined,\n        },\n        {\n          label: classData?.access?.is_public ? 'Public' : 'Private',\n          icon: classData?.access?.is_public ? <Public /> : <Lock />,\n          color: classData?.access?.is_public ? 'success' : 'default',\n          ariaLabel: classData?.access?.is_public ? 'Public class' : 'Private class',\n        },\n        {\n          label: `Members: ${stats?.member_count || members?.length || 0}`,\n          icon: <People />,\n          color: 'primary',\n          ariaLabel: `Members: ${stats?.member_count || members?.length || 0}`,\n        },\n        {\n          label: `Boards: ${filteredBoards?.length || 0}`,\n          icon: <Forum />,\n          color: 'info',\n          ariaLabel: `Boards: ${filteredBoards?.length || 0}`,\n        },\n        {\n          label: `Favorites: ${stats?.favorite_count || 0}`,\n          icon: <Star />,\n          color: 'warning',\n          ariaLabel: `Favorites: ${stats?.favorite_count || 0}`,\n        },\n        {\n          label: `Owner: ${classData?.creator?.username || 'Unknown'}`,\n          ariaLabel: `Owner: ${classData?.creator?.username || 'Unknown'}`,\n        },\n      ],\n      actions: [\n        {\n          label: 'Create Board',\n          icon: <Add />,\n          onClick: handleOpenCreateBoard,\n          tooltip: 'Create a new board within this class',\n          disabled: actionLoading || classesLoading || boardsLoading || !canCreateBoard,\n          ariaLabel: 'Create a new board',\n        },\n        {\n          label: 'Edit Class',\n          onClick: () => {\n            if (!classData) {\n              showNotification('Class data is not available', 'error');\n              return;\n            }\n            setEditingClass({\n              class_id: classData.class_id,\n              name: classData.name || '',\n              description: classData.description || '',\n              is_public: classData.access?.is_public || false,\n              visibility: classData.access?.is_public ? 'public' : 'private',\n              gate_id: classData.gate_id || '',\n              settings: classData.settings || {\n                max_boards: 100,\n                max_members: 50,\n                board_creation_cost: 50,\n                tweet_cost: 1,\n                allow_invites: true,\n                require_approval: false,\n                ai_moderation_enabled: true,\n                auto_archive_after: 30,\n              },\n              tags: classData.tags || [],\n            });\n            setEditClassDialogOpen(true);\n          },\n          tooltip: 'Edit class details and settings',\n          disabled: actionLoading || !canEdit || isLoading,\n          ariaLabel: 'Edit class',\n          isMenuItem: true,\n        },\n        {\n          label: 'Manage Members',\n          onClick: handleOpenClassMemberDialog,\n          tooltip: 'Manage class members',\n          disabled: actionLoading || !canEdit,\n          ariaLabel: 'Manage class members',\n          isMenuItem: true,\n        },\n        {\n          label: 'Delete Class',\n          onClick: () => setDeleteClassDialogOpen(true),\n          tooltip: 'Permanently delete this class',\n          disabled: actionLoading || !canDelete,\n          ariaLabel: 'Delete class',\n          variant: 'delete',\n          isMenuItem: true,\n        },\n      ].filter((action) => action.label !== 'Create Board' || canCreateBoard),\n      isFavorited: classData?.is_favorited || false,\n      onFavoriteToggle: handleFavoriteToggle,\n      actionLoading,\n    }),\n    [\n      classData,\n      stats,\n      members,\n      filteredBoards,\n      gate,\n      canEdit,\n      canDelete,\n      canCreateBoard,\n      actionLoading,\n      classesLoading,\n      boardsLoading,\n      isLoading,\n      handleOpenCreateBoard,\n      handleOpenClassMemberDialog,\n      handleFavoriteToggle,\n      navigate,\n      showNotification,\n    ]\n  );\n\n  if (authLoading || isLoading) {\n    return (\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <LoadingSkeleton />\n      </AppLayout>\n    );\n  }\n\n  if (!isAuthenticated) {\n    navigate('/login', { state: { from: location.pathname } });\n    return null;\n  }\n\n  if (!classData && classError && classError !== 'canceled') {\n    showNotification('Class not found or failed to load', 'error');\n    navigate('/classes');\n    return null;\n  }\n\n  return (\n    <ErrorBoundary>\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <ProfileHeader user={authData} isOwnProfile={true} headerData={headerData} userRole={userRole} />\n        <EntityGrid\n          type=\"boards\"\n          items={filteredBoards}\n          cardComponent={CardMain}\n          itemKey=\"board_id\"\n          quickFilter={quickFilter}\n          setQuickFilter={setQuickFilter}\n          searchQuery={searchQuery}\n          setSearchQuery={debouncedSetSearchQuery}\n          filterOptions={BOARD_FILTER_OPTIONS}\n          onResetFilters={handleResetFilters}\n          handleFavorite={toggleFavoriteBoard}\n          setEditingItem={(board) => {\n            setEditingBoard(board);\n            setEditBoardDialogOpen(true);\n          }}\n          setItemToDelete={setBoardToDelete}\n          setDeleteDialogOpen={setDeleteBoardDialogOpen}\n          handleManageMembers={handleOpenBoardMemberDialog}\n          navigate={navigate}\n          currentUser={authData}\n          token={token}\n          onCreateNew={canCreateBoard ? handleOpenCreateBoard : null}\n          lastItemRef={lastBoardElementRef}\n          hasMore={pagination.hasMore}\n          loading={boardsLoading}\n          disabled={actionLoading || classesLoading || boardsLoading}\n        />\n        <EntityDialogs\n          type=\"boards\"\n          createOpen={createBoardDialogOpen}\n          editOpen={editBoardDialogOpen}\n          deleteOpen={deleteBoardDialogOpen}\n          memberOpen={memberBoardDialogOpen}\n          item={popupBoard}\n          setItem={setPopupBoard}\n          editingItem={editingBoard}\n          setEditingItem={setEditingBoard}\n          itemToDelete={boardToDelete}\n          setItemToDelete={setBoardToDelete}\n          onSaveCreate={handleCreateBoard}\n          onSaveEdit={handleUpdateBoard}\n          onCancelCreate={handleCancelCreateBoard}\n          onCancelEdit={() => {\n            setEditBoardDialogOpen(false);\n            setEditingBoard(null);\n          }}\n          onConfirmDelete={handleDeleteBoard}\n          onCloseDelete={() => {\n            setDeleteBoardDialogOpen(false);\n            setBoardToDelete(null);\n          }}\n          selectedId={selectedBoardId}\n          members={boards.find((b) => b.board_id === selectedBoardId)?.members || []}\n          addMember={(id, memberData) => handleAddMember(id, memberData, true)}\n          removeMember={(id, username) => handleRemoveMember(id, username, true)}\n          updateMemberRole={(id, username, role) => handleUpdateMemberRole(id, username, role, true)}\n          onSaveMembers={() => handleSaveMembers(true)}\n          onCancelMembers={handleCancelBoardMemberDialog}\n          disabled={actionLoading || classesLoading || boardsLoading}\n          loading={actionLoading}\n          token={token}\n          gates={gates}\n          classes={classes}\n          currentClass={classData}\n          fixedClassId={class_id}\n          initialClassId={class_id}\n        />\n        {editClassDialogOpen && editingClass && (\n          <EntityDialogs\n            type=\"classes\"\n            createOpen={false}\n            editOpen={editClassDialogOpen}\n            deleteOpen={deleteClassDialogOpen}\n            memberOpen={memberClassDialogOpen}\n            item={editingClass}\n            setItem={setEditingClass}\n            editingItem={editingClass}\n            setEditingItem={setEditingClass}\n            itemToDelete={class_id}\n            setItemToDelete={() => {}}\n            onSaveCreate={() => {}}\n            onSaveEdit={handleUpdateClass}\n            onCancelCreate={() => {}}\n            onCancelEdit={() => {\n              setEditClassDialogOpen(false);\n              setEditingClass(null);\n            }}\n            onConfirmDelete={handleDeleteClass}\n            onCloseDelete={() => setDeleteClassDialogOpen(false)}\n            selectedId={class_id}\n            members={members || []}\n            addMember={(id, memberData) => handleAddMember(id, memberData, false)}\n            removeMember={(id, username) => handleRemoveMember(id, username, false)}\n            updateMemberRole={(id, username, role) => handleUpdateMemberRole(id, username, role, false)}\n            onSaveMembers={() => handleSaveMembers(false)}\n            onCancelMembers={handleCancelClassMemberDialog}\n            disabled={actionLoading || classesLoading}\n            loading={actionLoading}\n            token={token}\n            gates={gates}\n            classes={classes}\n            currentGate={gate}\n          />\n        )}\n      </AppLayout>\n    </ErrorBoundary>\n  );\n};\n\nClassPage.propTypes = {\n  token: PropTypes.string,\n  authData: PropTypes.shape({\n    anonymous_id: PropTypes.string,\n    username: PropTypes.string,\n    avatar: PropTypes.string,\n    total_points: PropTypes.number,\n  }),\n  handleLogout: PropTypes.func,\n  isAuthenticated: PropTypes.bool,\n  authLoading: PropTypes.bool,\n};\n\nexport default React.memo(ClassPage);","import React from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport Filters from '../Filters/Filters';\nimport Grids from '../Grids/Grids';\nimport { containerStyles } from '../../styles/BaseStyles';\n\nconst EntityGrid = ({\n  type,\n  items,\n  cardComponent: CardComponent,\n  itemKey,\n  quickFilter,\n  setQuickFilter,\n  searchQuery,\n  setSearchQuery,\n  filterOptions,\n  onResetFilters,\n  handleFavorite,\n  setEditingItem,\n  setItemToDelete,\n  setDeleteDialogOpen,\n  handleManageMembers,\n  navigate,\n  currentUser,\n  token,\n  onCreateNew,\n  disabled,\n  profileHeader,\n  lastItemRef,\n  hasMore,\n  loading,\n}) => {\n  return (\n    <Box sx={{ ...containerStyles, maxWidth: '1500px', mx: 'auto' }}>\n      {profileHeader}\n      <Filters\n        type={type}\n        quickFilter={quickFilter}\n        setQuickFilter={setQuickFilter}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        filterOptions={filterOptions}\n        onReset={onResetFilters}\n      />\n      <Grids\n        items={items}\n        cardComponent={CardComponent}\n        itemKey={itemKey}\n        gridType={type}\n        handleFavorite={handleFavorite}\n        setEditingItem={setEditingItem}\n        setItemToDelete={setItemToDelete}\n        setDeleteDialogOpen={setDeleteDialogOpen}\n        handleManageMembers={handleManageMembers}\n        navigate={navigate}\n        currentUser={currentUser}\n        token={token}\n        onCreateNew={onCreateNew}\n        disabled={disabled}\n        lastItemRef={lastItemRef}\n        hasMore={hasMore}\n      />\n      {loading && hasMore && (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n          <CircularProgress aria-label=\"Loading more items\" />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nEntityGrid.propTypes = {\n  type: PropTypes.string.isRequired,\n  items: PropTypes.array.isRequired,\n  cardComponent: PropTypes.elementType.isRequired,\n  itemKey: PropTypes.string.isRequired,\n  quickFilter: PropTypes.string.isRequired,\n  setQuickFilter: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ).isRequired,\n  onResetFilters: PropTypes.func.isRequired,\n  handleFavorite: PropTypes.func,\n  setEditingItem: PropTypes.func,\n  setItemToDelete: PropTypes.func,\n  setDeleteDialogOpen: PropTypes.func,\n  handleManageMembers: PropTypes.func,\n  navigate: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  token: PropTypes.string,\n  onCreateNew: PropTypes.func,\n  disabled: PropTypes.bool,\n  profileHeader: PropTypes.node,\n  lastItemRef: PropTypes.func,\n  hasMore: PropTypes.bool,\n  loading: PropTypes.bool,\n};\n\nexport default React.memo(EntityGrid);"],"names":["createSvgIcon","_jsx","d","ErrorBoundary","_ref","children","hasError","setHasError","useState","useCallback","error","errorInfo","console","ClassPage","_classData$access","_boards$find","navigate","useNavigate","location","useLocation","class_id","useParams","showNotification","useNotification","token","authData","handleLogout","isAuthenticated","loading","authLoading","useAuth","classItem","classData","members","stats","classes","fetchClass","fetchClassMembersList","updateExistingClass","deleteExistingClass","addMemberToClass","removeMemberFromClass","updateMemberRole","updateClassMemberRole","toggleFavoriteClass","classesLoading","classError","useClasses","boards","pagination","fetchBoardsByClass","createNewBoard","updateExistingBoard","deleteExistingBoard","addMemberToBoard","removeMemberFromBoard","updateBoardMemberRole","toggleFavoriteBoard","boardsLoading","boardsError","useBoards","gates","fetchGatesList","gatesLoading","gatesError","useGates","createBoardDialogOpen","setCreateBoardDialogOpen","editBoardDialogOpen","setEditBoardDialogOpen","deleteBoardDialogOpen","setDeleteBoardDialogOpen","memberBoardDialogOpen","setMemberBoardDialogOpen","editClassDialogOpen","setEditClassDialogOpen","deleteClassDialogOpen","setDeleteClassDialogOpen","memberClassDialogOpen","setMemberClassDialogOpen","editingClass","setEditingClass","editingBoard","setEditingBoard","boardToDelete","setBoardToDelete","selectedBoardId","setSelectedBoardId","popupBoard","setPopupBoard","DEFAULT_BOARD","quickFilter","setQuickFilter","searchQuery","setSearchQuery","observer","useRef","lastBoardElementRef","node","hasMore","current","disconnect","IntersectionObserver","entries","isIntersecting","controller","AbortController","visibility","undefined","page","signal","err","name","message","abort","observe","debouncedSetSearchQuery","useMemo","debounce","value","fetchFunctions","limit","isLoading","actionLoading","setActionLoading","useEntity","useEffect","trim","filter","Boolean","forEach","filteredBoards","filterEntities","userRole","_members$find","find","m","anonymous_id","role","gate","g","gate_id","isOwner","creator_id","canEdit","canDelete","canCreateBoard","access","is_public","handleOpenCreateBoard","handleCancelCreateBoard","handleCreateBoard","async","_popupBoard$name","createdBoard","board_id","handleUpdateBoard","_editingBoard$name","handleDeleteBoard","handleUpdateClass","_editingClass$name","handleDeleteClass","handleFavoriteToggle","is_favorited","handleAddMember","id","memberData","isBoard","arguments","length","_entity$members","_entity$settings","entity","b","settings","max_members","handleRemoveMember","username","handleUpdateMemberRole","newRole","handleOpenClassMemberDialog","handleOpenBoardMemberDialog","boardId","handleSaveMembers","handleCancelBoardMemberDialog","handleCancelClassMemberDialog","handleResetFilters","cancel","reset","headerData","_classData$access2","_classData$access3","_classData$access4","_classData$access5","_classData$creator","_classData$creator2","type","title","titleAriaLabel","description","descriptionAriaLabel","chips","label","icon","Home","color","ariaLabel","onClick","Public","Lock","member_count","People","Forum","favorite_count","Star","creator","actions","Add","tooltip","disabled","_classData$access6","_classData$access7","max_boards","board_creation_cost","tweet_cost","allow_invites","require_approval","ai_moderation_enabled","auto_archive_after","tags","isMenuItem","variant","action","isFavorited","onFavoriteToggle","AppLayout","currentUser","onLogout","LoadingSkeleton","_jsxs","ProfileHeader","user","isOwnProfile","EntityGrid","items","cardComponent","CardMain","itemKey","filterOptions","BOARD_FILTER_OPTIONS","onResetFilters","handleFavorite","setEditingItem","board","setItemToDelete","setDeleteDialogOpen","handleManageMembers","onCreateNew","lastItemRef","EntityDialogs","createOpen","editOpen","deleteOpen","memberOpen","item","setItem","editingItem","itemToDelete","onSaveCreate","onSaveEdit","onCancelCreate","onCancelEdit","onConfirmDelete","onCloseDelete","selectedId","addMember","removeMember","onSaveMembers","onCancelMembers","currentClass","fixedClassId","initialClassId","currentGate","state","from","pathname","React","CardComponent","profileHeader","Box","sx","containerStyles","maxWidth","mx","Filters","onReset","Grids","gridType","display","justifyContent","mt","CircularProgress"],"sourceRoot":""}