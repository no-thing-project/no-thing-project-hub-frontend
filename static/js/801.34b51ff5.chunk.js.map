{"version":3,"file":"static/js/801.34b51ff5.chunk.js","mappings":"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","sources":["api/boardsApi.js","hooks/useBoards.js"],"sourcesContent":["import { get, post, put, del, handleApiError } from './apiClient';\n\nconst BASE_BOARD_PATH = '/api/v1/boards';\n\nconst ERROR_MESSAGES = {\n  TOKEN_REQUIRED: 'Token is required',\n  BOARD_ID_REQUIRED: 'Board ID is required',\n  GATE_ID_REQUIRED: 'Gate ID is required',\n  CLASS_ID_REQUIRED: 'Class ID is required',\n  PARENT_BOARD_ID_REQUIRED: 'Parent board ID is required',\n  USERNAME_REQUIRED: 'Username is required',\n  DATA_REQUIRED: 'Board data is required',\n  STATUS_REQUIRED: 'Status is required',\n};\n\n/**\n * Validate that a parameter is a non-empty string\n * @param {string} param - Parameter to validate\n * @param {string} paramName - Name of the parameter for error message\n * @throws {Error} If parameter is invalid\n */\nconst validateStringParam = (param, paramName) => {\n  if (!param || typeof param !== 'string' || !param.trim()) {\n    throw new Error(ERROR_MESSAGES[`${paramName.toUpperCase()}_REQUIRED`]);\n  }\n};\n\n/**\n * Validate that an object is non-null and not empty\n * @param {object} obj - Object to validate\n * @param {string} paramName - Name of the parameter for error message\n * @throws {Error} If object is invalid\n */\nconst validateObjectParam = (obj, paramName) => {\n  if (!obj || typeof obj !== 'object' || Object.keys(obj).length === 0) {\n    throw new Error(ERROR_MESSAGES[`${paramName.toUpperCase()}_REQUIRED`]);\n  }\n};\n\n/**\n * Fetch list of boards\n * @param {string} token - Authorization token\n * @param {object} [filters={}] - Query filters\n * @param {AbortSignal} [signal] - Abort signal\n * @returns {Promise<object>} Boards data\n */\nexport const fetchBoards = async (token, filters = {}, signal) => {\n  validateStringParam(token, 'token');\n  try {\n    const response = await get(BASE_BOARD_PATH, {\n      headers: { Authorization: `Bearer ${token}` },\n      params: filters,\n      signal: signal instanceof AbortSignal ? signal : undefined,\n    });\n    return response.data.content || { boards: [], pagination: {} };\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Fetch boards by gate ID\n * @param {string} gateId - Gate ID\n * @param {string} token - Authorization token\n * @param {object} [filters={}] - Query filters\n * @param {AbortSignal} [signal] - Abort signal\n * @returns {Promise<object>} Boards data\n */\nexport const fetchBoardsByGateId = async (gateId, token, filters = {}, signal) => {\n  validateStringParam(gateId, 'gateId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await get(`${BASE_BOARD_PATH}/gates/${gateId}/boards`, {\n      headers: { Authorization: `Bearer ${token}` },\n      params: filters,\n      signal: signal instanceof AbortSignal ? signal : undefined,\n    });\n    return response.data.content || { boards: [], gate: null, pagination: {} };\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Fetch boards by class ID\n * @param {string} classId - Class ID\n * @param {string} token - Authorization token\n * @param {object} [filters={}] - Query filters\n * @param {AbortSignal} [signal] - Abort signal\n * @returns {Promise<object>} Boards data\n */\nexport const fetchBoardsByClassId = async (classId, token, filters = {}, signal) => {\n  validateStringParam(classId, 'classId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await get(`${BASE_BOARD_PATH}/classes/${classId}/boards`, {\n      headers: { Authorization: `Bearer ${token}` },\n      params: filters,\n      signal: signal instanceof AbortSignal ? signal : undefined,\n    });\n    return response.data.content || { boards: [], class: null, pagination: {} };\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Fetch a single board by ID\n * @param {string} boardId - Board ID\n * @param {string} token - Authorization token\n * @param {AbortSignal} [signal] - Abort signal\n * @returns {Promise<object>} Board data\n */\nexport const fetchBoardById = async (boardId, token, signal) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await get(`${BASE_BOARD_PATH}/${boardId}`, {\n      headers: { Authorization: `Bearer ${token}` },\n      signal: signal instanceof AbortSignal ? signal : undefined,\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Create a new board\n * @param {object} boardData - Board data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Created board data\n */\nexport const createBoard = async (boardData, token) => {\n  validateObjectParam(boardData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(BASE_BOARD_PATH, boardData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Create a new board in a gate\n * @param {string} gateId - Gate ID\n * @param {object} boardData - Board data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Created board data\n */\nexport const createBoardInGate = async (gateId, boardData, token) => {\n  validateStringParam(gateId, 'gateId');\n  validateObjectParam(boardData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(`${BASE_BOARD_PATH}/gates/${gateId}/boards`, boardData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Create a new board in a class\n * @param {string} classId - Class ID\n * @param {object} boardData - Board data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Created board data\n */\nexport const createBoardInClass = async (classId, boardData, token) => {\n  validateStringParam(classId, 'classId');\n  validateObjectParam(boardData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(`${BASE_BOARD_PATH}/classes/${classId}/boards`, boardData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Create a new board in another board\n * @param {string} parentBoardId - Parent board ID\n * @param {object} boardData - Board data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Created board data\n */\nexport const createBoardInBoard = async (parentBoardId, boardData, token) => {\n  validateStringParam(parentBoardId, 'parentBoardId');\n  validateObjectParam(boardData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(`${BASE_BOARD_PATH}/boards/${parentBoardId}/boards`, boardData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Update a board\n * @param {string} boardId - Board ID\n * @param {object} boardData - Updated board data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const updateBoard = async (boardId, boardData, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateObjectParam(boardData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await put(`${BASE_BOARD_PATH}/${boardId}`, boardData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Update board status\n * @param {string} boardId - Board ID\n * @param {object} statusData - New status data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const updateBoardStatus = async (boardId, statusData, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateObjectParam(statusData, 'status');\n  validateStringParam(token, 'token');\n  try {\n    const response = await put(`${BASE_BOARD_PATH}/${boardId}/status`, statusData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Delete a board\n * @param {string} boardId - Board ID\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Deleted board data\n */\nexport const deleteBoard = async (boardId, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await del(`${BASE_BOARD_PATH}/${boardId}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Add a member to a board\n * @param {string} boardId - Board ID\n * @param {object} memberData - Member data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const addMember = async (boardId, memberData, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateObjectParam(memberData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(`${BASE_BOARD_PATH}/${boardId}/members`, memberData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Remove a member from a board\n * @param {string} boardId - Board ID\n * @param {string} username - Username of member to remove\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const removeMember = async (boardId, username, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(username, 'username');\n  validateStringParam(token, 'token');\n  try {\n    const response = await del(`${BASE_BOARD_PATH}/${boardId}/members/${encodeURIComponent(username)}`, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Update a member's role in a board\n * @param {string} boardId - Board ID\n * @param {string} username - Username of member\n * @param {object} roleData - New role data\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const updateMember = async (boardId, username, roleData, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(username, 'username');\n  validateObjectParam(roleData, 'data');\n  validateStringParam(token, 'token');\n  try {\n    const response = await put(`${BASE_BOARD_PATH}/${boardId}/members/${encodeURIComponent(username)}`, roleData, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Favorite a board\n * @param {string} boardId - Board ID\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const favoriteBoard = async (boardId, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(`${BASE_BOARD_PATH}/${boardId}/favorite`, {}, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Unfavorite a board\n * @param {string} boardId - Board ID\n * @param {string} token - Authorization token\n * @returns {Promise<object>} Updated board data\n */\nexport const unfavoriteBoard = async (boardId, token) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await post(`${BASE_BOARD_PATH}/${boardId}/unfavorite`, {}, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data.content || null;\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};\n\n/**\n * Fetch board members\n * @param {string} boardId - Board ID\n * @param {string} token - Authorization token\n * @param {AbortSignal} [signal] - Abort signal\n * @returns {Promise<object>} Members data\n */\nexport const fetchBoardMembers = async (boardId, token, signal) => {\n  validateStringParam(boardId, 'boardId');\n  validateStringParam(token, 'token');\n  try {\n    const response = await get(`${BASE_BOARD_PATH}/${boardId}/members`, {\n      headers: { Authorization: `Bearer ${token}` },\n      signal: signal instanceof AbortSignal ? signal : undefined,\n    });\n    return response.data.content || { members: [] };\n  } catch (error) {\n    throw handleApiError(error);\n  }\n};","/**\n * @module useBoards\n * @description React hook for managing boards and their members with caching and debounced API calls.\n */\nimport { useState, useCallback, useMemo, useEffect } from 'react';\nimport debounce from 'lodash/debounce';\nimport {\n  fetchBoards,\n  fetchBoardsByGateId,\n  fetchBoardsByClassId,\n  fetchBoardById,\n  createBoard,\n  createBoardInGate,\n  createBoardInClass,\n  createBoardInBoard,\n  updateBoard,\n  updateBoardStatus,\n  deleteBoard,\n  addMember,\n  removeMember,\n  updateMember,\n  favoriteBoard,\n  unfavoriteBoard,\n  fetchBoardMembers,\n} from '../api/boardsApi';\n\n// Constants\nconst ERROR_MESSAGES = {\n  AUTH_REQUIRED: 'Authentication required.',\n  BOARD_ID_MISSING: 'Board ID is missing.',\n  BOARD_NAME_MISSING: 'Board name is missing.',\n  BOARD_NOT_FOUND: 'Board not found.',\n  STATUS_DATA_MISSING: 'Status data is missing.',\n  USERNAME_MISSING: 'Username is missing.',\n  ROLE_MISSING: 'Role is missing.',\n  GATE_ID_MISSING: 'Gate ID is required.',\n  CLASS_ID_MISSING: 'Class ID is required.',\n  PARENT_BOARD_ID_MISSING: 'Parent board ID is required.',\n  GENERIC: 'An error occurred.',\n};\n\nconst CONFIG = {\n  MAX_CACHE_SIZE: 10,\n  CACHE_EXPIRY_MS: 30 * 60 * 1000, // 30 minutes\n  DEBOUNCE_MS: 300,\n  DEFAULT_LIMIT: 50,\n  CACHE_VERSION: 'v1',\n};\n\n// LRU Cache implementation\nclass LRUCache {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.cache = new Map();\n  }\n\n  get(key) {\n    if (!this.cache.has(key)) return null;\n    const { value, timestamp } = this.cache.get(key);\n    if (Date.now() - timestamp > CONFIG.CACHE_EXPIRY_MS) {\n      this.cache.delete(key);\n      return null;\n    }\n    this.cache.delete(key);\n    this.cache.set(key, { value, timestamp });\n    return value;\n  }\n\n  set(key, value) {\n    if (this.cache.size >= this.capacity) {\n      const firstKey = this.cache.keys().next().value;\n      this.cache.delete(firstKey);\n    }\n    this.cache.set(key, { value, timestamp: Date.now() });\n  }\n\n  clear() {\n    this.cache.clear();\n  }\n}\n\nconst boardCache = new LRUCache(CONFIG.MAX_CACHE_SIZE);\n\n/**\n * Hook for managing boards and their members.\n * @param {string|null} token - Authentication token.\n * @param {function} onLogout - Logout callback.\n * @param {function} navigate - Navigation callback.\n * @param {boolean} skipInitialFetch - Skip initial boards fetch.\n * @returns {object} Board management functions and state.\n */\nexport const useBoards = (token, onLogout, navigate, skipInitialFetch = false) => {\n  const [boards, setBoards] = useState([]);\n  const [boardItem, setBoardItem] = useState(null);\n  const [members, setMembers] = useState([]);\n  const [pagination, setPagination] = useState({ page: 1, limit: CONFIG.DEFAULT_LIMIT, total: 0, hasMore: true });\n  const [gateInfo, setGateInfo] = useState(null);\n  const [classInfo, setClassInfo] = useState(null);\n  const [error, setError] = useState(null);\n\n  const handleError = useCallback((err, message) => {\n    if (err.name === 'AbortError') return Promise.resolve(null);\n    const status = err.status || 500;\n    if (status === 401 || status === 403) {\n      onLogout('Session expired. Please log in again.');\n      navigate('/login');\n    }\n    const errorMessage = message || err.message || ERROR_MESSAGES.GENERIC;\n    setError(errorMessage);\n    return Promise.reject(new Error(errorMessage));\n  }, [onLogout, navigate]);\n\n  const normalizeMembers = useCallback((members = []) => {\n    return members.map((member) => ({\n      member_id: member.member_id || member.anonymous_id || '',\n      username: member.username || 'Unknown',\n      role: member.role || 'viewer',\n      joined_at: member.joined_at || null,\n      avatar: member.avatar || null,\n      total_points: member.total_points || 0,\n      anonymous_id: member.anonymous_id || member.member_id || '',\n    }));\n  }, []);\n\n  const resetState = useCallback(() => {\n    setBoards([]);\n    setBoardItem(null);\n    setMembers([]);\n    setPagination({ page: 1, limit: CONFIG.DEFAULT_LIMIT, total: 0, hasMore: true });\n    setGateInfo(null);\n    setClassInfo(null);\n    setError(null);\n    boardCache.clear();\n  }, []);\n\n  const fetchBoardsList = useCallback(async (filters = {}, signal, append = false) => {\n    if (!token) return handleError(new Error(), ERROR_MESSAGES.AUTH_REQUIRED);\n\n    const { page = 1, limit = CONFIG.DEFAULT_LIMIT } = filters;\n    const cacheKey = `${CONFIG.CACHE_VERSION}:boards:${JSON.stringify({ ...filters, page, limit })}`;\n    const cachedData = boardCache.get(cacheKey);\n\n    if (cachedData && !append) {\n      setBoards(cachedData.boards || []);\n      setPagination(cachedData.pagination || { page, limit, total: 0, hasMore: true });\n      setGateInfo(null);\n      setClassInfo(null);\n      return Promise.resolve(cachedData);\n    }\n    setError(null);\n\n    try {\n      const data = await fetchBoards(token, { ...filters, page, limit }, signal);\n      if (!data) throw new Error('No data received');\n      const newBoards = data.boards || [];\n      setBoards((prev) => (append ? [...prev, ...newBoards] : newBoards));\n      setPagination({\n        page: data.pagination?.page || page,\n        limit: data.pagination?.limit || limit,\n        total: data.pagination?.total || 0,\n        hasMore: newBoards.length === limit,\n      });\n      setGateInfo(null);\n      setClassInfo(null);\n      boardCache.set(cacheKey, data);\n      return Promise.resolve(data);\n    } catch (err) {\n      if (err.name === 'AbortError') return Promise.resolve(null);\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const debouncedFetchBoardsList = useMemo(() => {\n    return debounce((filters, signal, append, callback) => {\n      fetchBoardsList(filters, signal, append)\n        .then((result) => callback(null, result))\n        .catch((err) => callback(err, null));\n    }, CONFIG.DEBOUNCE_MS);\n  }, [fetchBoardsList]);\n\n  const fetchBoardsByGate = useCallback(async (gateId, filters = {}, signal, append = false) => {\n    if (!token || !gateId?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.GATE_ID_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    const { page = 1, limit = CONFIG.DEFAULT_LIMIT } = filters;\n    const cacheKey = `${CONFIG.CACHE_VERSION}:gate:${gateId}:${JSON.stringify({ ...filters, page, limit })}`;\n    const cachedData = boardCache.get(cacheKey);\n\n    if (cachedData && !append) {\n      setBoards(cachedData.boards || []);\n      setPagination(cachedData.pagination || { page, limit, total: 0, hasMore: true });\n      setGateInfo(cachedData.gate || null);\n      setClassInfo(null);\n      return Promise.resolve(cachedData);\n    }\n\n    setError(null);\n\n    try {\n      const data = await fetchBoardsByGateId(gateId, token, { ...filters, page, limit }, signal);\n      if (!data) throw new Error('No data received');\n      const newBoards = data.boards || [];\n      setBoards((prev) => (append ? [...prev, ...newBoards] : newBoards));\n      setPagination({\n        page: data.pagination?.page || page,\n        limit: data.pagination?.limit || limit,\n        total: data.pagination?.total || 0,\n        hasMore: newBoards.length === limit,\n      });\n      setGateInfo(data.gate || null);\n      setClassInfo(null);\n      boardCache.set(cacheKey, data);\n      return Promise.resolve(data);\n    } catch (err) {\n      if (err.name === 'AbortError') return Promise.resolve(null);\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const debouncedFetchBoardsByGate = useMemo(() => {\n    return debounce((gateId, filters, signal, append, callback) => {\n      fetchBoardsByGate(gateId, filters, signal, append)\n        .then((result) => callback(null, result))\n        .catch((err) => callback(err, null));\n    }, CONFIG.DEBOUNCE_MS);\n  }, [fetchBoardsByGate]);\n\n  const fetchBoardsByClass = useCallback(async (classId, filters = {}, signal, append = false) => {\n    if (!token || !classId?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.CLASS_ID_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    const { page = 1, limit = CONFIG.DEFAULT_LIMIT } = filters;\n    const cacheKey = `${CONFIG.CACHE_VERSION}:class:${classId}:${JSON.stringify({ ...filters, page, limit })}`;\n    const cachedData = boardCache.get(cacheKey);\n\n    if (cachedData && !append) {\n      setBoards(cachedData.boards || []);\n      setPagination(cachedData.pagination || { page, limit, total: 0, hasMore: true });\n      setClassInfo(cachedData.class || null);\n      setGateInfo(null);\n      return Promise.resolve(cachedData);\n    }\n\n    setError(null);\n\n    try {\n      const data = await fetchBoardsByClassId(classId, token, { ...filters, page, limit }, signal);\n      if (!data) throw new Error('No data received');\n      const newBoards = data.boards || [];\n      setBoards((prev) => (append ? [...prev, ...newBoards] : newBoards));\n      setPagination({\n        page: data.pagination?.page || page,\n        limit: data.pagination?.limit || limit,\n        total: data.pagination?.total || 0,\n        hasMore: newBoards.length === limit,\n      });\n      setClassInfo(data.class || null);\n      setGateInfo(null);\n      boardCache.set(cacheKey, data);\n      return Promise.resolve(data);\n    } catch (err) {\n      if (err.name === 'AbortError') return Promise.resolve(null);\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const debouncedFetchBoardsByClass = useMemo(() => {\n    return debounce((classId, filters, signal, append, callback) => {\n      fetchBoardsByClass(classId, filters, signal, append)\n        .then((result) => callback(null, result))\n        .catch((err) => callback(err, null));\n    }, CONFIG.DEBOUNCE_MS);\n  }, [fetchBoardsByClass]);\n\n  const fetchBoard = useCallback(async (boardId, signal) => {\n    if (!token || !boardId?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    const cacheKey = `${CONFIG.CACHE_VERSION}:board:${boardId}`;\n    const cachedData = boardCache.get(cacheKey);\n\n    if (cachedData) {\n      setBoardItem(cachedData);\n      setMembers(normalizeMembers(cachedData.members));\n      return Promise.resolve(cachedData);\n    }\n\n    setError(null);\n\n    try {\n      const boardData = await fetchBoardById(boardId, token, signal);\n      if (!boardData) throw new Error('No board data received');\n      setBoardItem(boardData);\n      setMembers(normalizeMembers(boardData.members || []));\n      boardCache.set(cacheKey, boardData);\n      return Promise.resolve(boardData);\n    } catch (err) {\n      if (err.name === 'AbortError') return Promise.resolve(null);\n      return handleError(err, ERROR_MESSAGES.BOARD_NOT_FOUND);\n    }\n  }, [token, handleError, normalizeMembers]);\n\n  const fetchBoardMembersList = useCallback(async (boardId, signal) => {\n    if (!token || !boardId?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    setError(null);\n\n    try {\n      const data = await fetchBoardMembers(boardId, token, signal);\n      if (!data) throw new Error('No members data received');\n      setMembers(normalizeMembers(data.members));\n      return Promise.resolve(data);\n    } catch (err) {\n      if (err.name === 'AbortError') return Promise.resolve(null);\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError, normalizeMembers]);\n\n  const debouncedFetchBoardMembersList = useMemo(() => {\n    return debounce((boardId, signal, callback) => {\n      fetchBoardMembersList(boardId, signal)\n        .then((result) => callback(null, result))\n        .catch((err) => callback(err, null));\n    }, CONFIG.DEBOUNCE_MS);\n  }, [fetchBoardMembersList]);\n\n  const createNewBoard = useCallback(async (boardData) => {\n    if (!token || !boardData?.name?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.BOARD_NAME_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    setError(null);\n\n    try {\n      const newBoard = await createBoard(\n        {\n          ...boardData,\n          visibility: boardData.visibility || 'private',\n          type: boardData.type || 'personal',\n          settings: {\n            max_tweets: boardData.settings?.max_tweets || 100,\n            max_members: boardData.settings?.max_members || 50,\n            tweet_cost: boardData.settings?.tweet_cost || 1,\n            favorite_cost: boardData.settings?.favorite_cost || 1,\n            points_to_creator: boardData.settings?.points_to_creator || 1,\n            allow_invites: boardData.settings?.allow_invites ?? true,\n            require_approval: boardData.settings?.require_approval ?? false,\n            ai_moderation_enabled: boardData.settings?.ai_moderation_enabled ?? true,\n            auto_archive_after: boardData.settings?.auto_archive_after || 30,\n            ...boardData.settings,\n          },\n        },\n        token\n      );\n      if (!newBoard) throw new Error('Failed to create board');\n      setBoards((prev) => [...prev, newBoard]);\n      boardCache.clear();\n      return Promise.resolve(newBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const createNewBoardInGate = useCallback(async (gateId, boardData) => {\n    if (!token || !gateId?.trim() || !boardData?.name?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !gateId ? ERROR_MESSAGES.GATE_ID_MISSING : ERROR_MESSAGES.BOARD_NAME_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const newBoard = await createBoardInGate(gateId, boardData, token);\n      if (!newBoard) throw new Error('Failed to create board in gate');\n      setBoards((prev) => [...prev, newBoard]);\n      boardCache.clear();\n      return Promise.resolve(newBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const createNewBoardInClass = useCallback(async (classId, boardData) => {\n    if (!token || !classId?.trim() || !boardData?.name?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !classId ? ERROR_MESSAGES.CLASS_ID_MISSING : ERROR_MESSAGES.BOARD_NAME_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const { class_id, ...cleanedBoardData } = boardData;\n      const newBoard = await createBoardInClass(classId, cleanedBoardData, token);\n      if (!newBoard) throw new Error('Failed to create board in class');\n      setBoards((prev) => [...prev, newBoard]);\n      boardCache.clear();\n      return Promise.resolve(newBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const createNewBoardInBoard = useCallback(async (parentBoardId, boardData) => {\n    if (!token || !parentBoardId?.trim() || !boardData?.name?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !parentBoardId ? ERROR_MESSAGES.PARENT_BOARD_ID_MISSING : ERROR_MESSAGES.BOARD_NAME_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const newBoard = await createBoardInBoard(parentBoardId, boardData, token);\n      if (!newBoard) throw new Error('Failed to create board in board');\n      setBoards((prev) => [...prev, newBoard]);\n      boardCache.clear();\n      return Promise.resolve(newBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const updateExistingBoard = useCallback(async (boardId, boardData) => {\n    if (!token || !boardId?.trim() || !boardData?.name?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !boardId ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.BOARD_NAME_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const { board_id, ...updateData } = boardData;\n      const updatedBoard = await updateBoard(boardId, updateData, token);\n      if (!updatedBoard) throw new Error('Failed to update board');\n      setBoards((prev) => prev.map((b) => (b.board_id === boardId ? updatedBoard : b)));\n      setBoardItem((prev) => (prev?.board_id === boardId ? updatedBoard : prev));\n      boardCache.clear();\n      return Promise.resolve(updatedBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const updateBoardStatusById = useCallback(async (boardId, statusData) => {\n    if (!token || !boardId?.trim() || !statusData) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !boardId ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.STATUS_DATA_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const updatedBoard = await updateBoardStatus(boardId, statusData, token);\n      if (!updatedBoard) throw new Error('Failed to update board status');\n      setBoards((prev) => prev.map((b) => (b.board_id === boardId ? updatedBoard : b)));\n      setBoardItem((prev) => (prev?.board_id === boardId ? updatedBoard : prev));\n      boardCache.clear();\n      return Promise.resolve(updatedBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const deleteExistingBoard = useCallback(async (boardId) => {\n    if (!token || !boardId?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    setError(null);\n\n    try {\n      await deleteBoard(boardId, token);\n      setBoards((prev) => prev.filter((b) => b.board_id !== boardId));\n      setBoardItem((prev) => (prev?.board_id === boardId ? null : prev));\n      boardCache.clear();\n      return Promise.resolve(true);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  const addMemberToBoard = useCallback(async (boardId, { username, role = 'viewer' }) => {\n    if (!token || !boardId?.trim() || !username?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !boardId ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.USERNAME_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const updatedBoard = await addMember(boardId, { username, role }, token);\n      if (!updatedBoard) throw new Error('Failed to add member');\n      setMembers(normalizeMembers(updatedBoard.members));\n      setBoardItem((prev) => (prev?.board_id === boardId ? updatedBoard : prev));\n      setBoards((prev) => prev.map((b) => (b.board_id === boardId ? updatedBoard : b)));\n      boardCache.clear();\n      return Promise.resolve(updatedBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError, normalizeMembers]);\n\n  const removeMemberFromBoard = useCallback(async (boardId, username) => {\n    if (!token || !boardId?.trim() || !username?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !boardId ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.USERNAME_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const updatedBoard = await removeMember(boardId, username, token);\n      if (!updatedBoard) throw new Error('Failed to remove member');\n      setMembers(normalizeMembers(updatedBoard.members));\n      setBoardItem((prev) => (prev?.board_id === boardId ? updatedBoard : prev));\n      setBoards((prev) => prev.map((b) => (b.board_id === boardId ? updatedBoard : b)));\n      boardCache.clear();\n      return Promise.resolve(updatedBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError, normalizeMembers]);\n\n  const updateMemberRole = useCallback(async (boardId, username, role) => {\n    if (!token || !boardId?.trim() || !username?.trim() || !role?.trim()) {\n      return handleError(new Error(), !token ? ERROR_MESSAGES.AUTH_REQUIRED : !boardId ? ERROR_MESSAGES.BOARD_ID_MISSING : !username ? ERROR_MESSAGES.USERNAME_MISSING : ERROR_MESSAGES.ROLE_MISSING);\n    }\n\n    setError(null);\n\n    try {\n      const updatedBoard = await updateMember(boardId, username, { role }, token);\n      if (!updatedBoard) throw new Error('Failed to update member role');\n      setMembers(normalizeMembers(updatedBoard.members));\n      setBoardItem((prev) => (prev?.board_id === boardId ? updatedBoard : prev));\n      setBoards((prev) => prev.map((b) => (b.board_id === boardId ? updatedBoard : b)));\n      boardCache.clear();\n      return Promise.resolve(updatedBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError, normalizeMembers]);\n\n  const toggleFavoriteBoard = useCallback(async (boardId, isFavorited) => {\n    if (!token || !boardId?.trim()) {\n      return handleError(new Error(), token ? ERROR_MESSAGES.BOARD_ID_MISSING : ERROR_MESSAGES.AUTH_REQUIRED);\n    }\n\n    setError(null);\n\n    try {\n      const updatedBoard = isFavorited ? await unfavoriteBoard(boardId, token) : await favoriteBoard(boardId, token);\n      if (!updatedBoard) throw new Error('Failed to toggle favorite status');\n      setBoards((prev) => prev.map((b) => (b.board_id === boardId ? updatedBoard : b)));\n      setBoardItem((prev) => (prev?.board_id === boardId ? updatedBoard : prev));\n      boardCache.clear();\n      return Promise.resolve(updatedBoard);\n    } catch (err) {\n      return handleError(err, ERROR_MESSAGES.GENERIC);\n    }\n  }, [token, handleError]);\n\n  useEffect(() => {\n    if (!token || skipInitialFetch) {\n      resetState();\n      return;\n    }\n\n    const controller = new AbortController();\n    debouncedFetchBoardsList({}, controller.signal, false, (err, result) => {\n      if (err && err.name !== 'AbortError') {\n        setError(err.message || ERROR_MESSAGES.GENERIC);\n      }\n    });\n\n    return () => {\n      controller.abort();\n      debouncedFetchBoardsList.cancel();\n      debouncedFetchBoardMembersList.cancel();\n    };\n  }, [token, skipInitialFetch, resetState, debouncedFetchBoardsList, debouncedFetchBoardMembersList]);\n\n  return useMemo(() => ({\n    boards,\n    boardItem,\n    members,\n    pagination,\n    gateInfo,\n    classInfo,\n    error,\n    fetchBoardsList: debouncedFetchBoardsList,\n    fetchBoardsByGate: debouncedFetchBoardsByGate,\n    fetchBoardsByClass: debouncedFetchBoardsByClass,\n    fetchBoard,\n    createNewBoard,\n    createNewBoardInGate,\n    createNewBoardInClass,\n    createNewBoardInBoard,\n    updateExistingBoard,\n    updateBoardStatusById,\n    deleteExistingBoard,\n    addMemberToBoard,\n    removeMemberFromBoard,\n    updateMemberRole,\n    fetchBoardMembersList: debouncedFetchBoardMembersList,\n    toggleFavoriteBoard,\n    resetState,\n  }), [\n    boards,\n    boardItem,\n    members,\n    pagination,\n    gateInfo,\n    classInfo,\n    error,\n    debouncedFetchBoardsList,\n    debouncedFetchBoardsByGate,\n    debouncedFetchBoardsByClass,\n    fetchBoard,\n    createNewBoard,\n    createNewBoardInGate,\n    createNewBoardInClass,\n    createNewBoardInBoard,\n    updateExistingBoard,\n    updateBoardStatusById,\n    deleteExistingBoard,\n    addMemberToBoard,\n    removeMemberFromBoard,\n    updateMemberRole,\n    debouncedFetchBoardMembersList,\n    toggleFavoriteBoard,\n    resetState,\n  ]);\n};\n\nexport default useBoards;"],"names":["BASE_BOARD_PATH","ERROR_MESSAGES","TOKEN_REQUIRED","BOARD_ID_REQUIRED","GATE_ID_REQUIRED","CLASS_ID_REQUIRED","PARENT_BOARD_ID_REQUIRED","USERNAME_REQUIRED","DATA_REQUIRED","STATUS_REQUIRED","validateStringParam","param","paramName","trim","Error","toUpperCase","validateObjectParam","obj","Object","keys","length","CONFIG","MAX_CACHE_SIZE","CACHE_EXPIRY_MS","DEBOUNCE_MS","DEFAULT_LIMIT","CACHE_VERSION","boardCache","constructor","capacity","this","cache","Map","get","key","has","value","timestamp","Date","now","delete","set","size","firstKey","next","clear","useBoards","token","onLogout","navigate","skipInitialFetch","arguments","undefined","boards","setBoards","useState","boardItem","setBoardItem","members","setMembers","pagination","setPagination","page","limit","total","hasMore","gateInfo","setGateInfo","classInfo","setClassInfo","error","setError","handleError","useCallback","err","message","name","Promise","resolve","status","errorMessage","reject","normalizeMembers","map","member","member_id","anonymous_id","username","role","joined_at","avatar","total_points","resetState","fetchBoardsList","async","filters","signal","append","cacheKey","JSON","stringify","cachedData","_data$pagination","_data$pagination2","_data$pagination3","data","headers","Authorization","params","AbortSignal","content","handleApiError","fetchBoards","newBoards","prev","debouncedFetchBoardsList","useMemo","debounce","callback","then","result","catch","fetchBoardsByGate","gateId","gate","_data$pagination4","_data$pagination5","_data$pagination6","fetchBoardsByGateId","debouncedFetchBoardsByGate","fetchBoardsByClass","classId","class","_data$pagination7","_data$pagination8","_data$pagination9","fetchBoardsByClassId","debouncedFetchBoardsByClass","fetchBoard","boardId","boardData","fetchBoardById","fetchBoardMembersList","fetchBoardMembers","debouncedFetchBoardMembersList","createNewBoard","_boardData$name","_boardData$settings","_boardData$settings2","_boardData$settings3","_boardData$settings4","_boardData$settings5","_boardData$settings$a","_boardData$settings6","_boardData$settings$r","_boardData$settings7","_boardData$settings$a2","_boardData$settings8","_boardData$settings9","newBoard","post","createBoard","visibility","type","settings","max_tweets","max_members","tweet_cost","favorite_cost","points_to_creator","allow_invites","require_approval","ai_moderation_enabled","auto_archive_after","createNewBoardInGate","_boardData$name2","createBoardInGate","createNewBoardInClass","_boardData$name3","class_id","cleanedBoardData","createBoardInClass","createNewBoardInBoard","parentBoardId","_boardData$name4","createBoardInBoard","updateExistingBoard","_boardData$name5","board_id","updateData","updatedBoard","put","updateBoard","b","updateBoardStatusById","statusData","updateBoardStatus","deleteExistingBoard","del","deleteBoard","filter","addMemberToBoard","_ref","memberData","addMember","removeMemberFromBoard","encodeURIComponent","removeMember","updateMemberRole","roleData","updateMember","toggleFavoriteBoard","isFavorited","unfavoriteBoard","favoriteBoard","useEffect","controller","AbortController","abort","cancel"],"sourceRoot":""}