{"version":3,"file":"static/js/133.a23671a1.chunk.js","mappings":"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","sources":["pages/GatePage.jsx","components/Common/EntityGrid.jsx"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { Add, Public, Lock, People, Forum, Star } from '@mui/icons-material';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\nimport AppLayout from '../components/Layout/AppLayout';\nimport ProfileHeader from '../components/Headers/ProfileHeader';\nimport EntityGrid from '../components/Common/EntityGrid';\nimport EntityDialogs from '../components/Common/EntityDialogs';\nimport LoadingSkeleton from '../components/Common/LoadingSkeleton';\nimport CardMain from '../components/Cards/CardMain';\nimport useAuth from '../hooks/useAuth';\nimport { useGates } from '../hooks/useGates';\nimport { useClasses } from '../hooks/useClasses';\nimport { useEntity } from '../hooks/useEntity';\nimport { useNotification } from '../context/NotificationContext';\nimport { filterEntities } from '../utils/filterUtils';\nimport { DEFAULT_CLASS } from '../constants/default';\nimport { CLASS_FILTER_OPTIONS } from '../constants/filterOptions';\n\nconst ErrorBoundary = ({ children }) => {\n  const [hasError, setHasError] = useState(false);\n\n  const handleError = useCallback((error, errorInfo) => {\n    console.error('ErrorBoundary caught:', error, errorInfo);\n    setHasError(true);\n  }, []);\n\n  if (hasError) {\n    return <div>Something went wrong. Please try again later.</div>;\n  }\n\n  return children;\n};\n\nconst GatePage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { gate_id } = useParams();\n  const { showNotification } = useNotification();\n  const { token, authData, handleLogout, isAuthenticated, loading: authLoading } = useAuth();\n  const {\n    gate: gateData,\n    members,\n    stats,\n    gates,\n    fetchGate,\n    fetchGateMembersList,\n    updateExistingGate,\n    deleteExistingGate,\n    addMemberToGate,\n    removeMemberFromGate,\n    updateMemberRole: updateGateMemberRole,\n    toggleFavoriteGate,\n    loading: gatesLoading,\n    error: gateError,\n  } = useGates(token, handleLogout, navigate, true);\n  const {\n    classes: classesList,\n    pagination,\n    fetchClassesByGate,\n    createNewClass,\n    updateExistingClass,\n    deleteExistingClass,\n    toggleFavoriteClass,\n    addMemberToClass,\n    removeMemberFromClass,\n    updateMemberRole: updateClassMemberRole,\n    loading: classesLoading,\n    error: classesError,\n  } = useClasses(token, handleLogout, navigate, true);\n\n  const [createClassDialogOpen, setCreateClassDialogOpen] = useState(false);\n  const [editClassDialogOpen, setEditClassDialogOpen] = useState(false);\n  const [deleteClassDialogOpen, setDeleteClassDialogOpen] = useState(false);\n  const [memberClassDialogOpen, setMemberClassDialogOpen] = useState(false);\n  const [editGateDialogOpen, setEditGateDialogOpen] = useState(false);\n  const [deleteGateDialogOpen, setDeleteGateDialogOpen] = useState(false);\n  const [memberGateDialogOpen, setMemberGateDialogOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState(null);\n  const [classToDelete, setClassToDelete] = useState(null);\n  const [selectedClassId, setSelectedClassId] = useState(null);\n  const [editingGate, setEditingGate] = useState(null);\n  const [popupClass, setPopupClass] = useState({ ...DEFAULT_CLASS, gate_id });\n  const [quickFilter, setQuickFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const observer = useRef();\n  const lastClassElementRef = useCallback(\n    (node) => {\n      if (classesLoading || !pagination.hasMore) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && pagination.hasMore) {\n          const controller = new AbortController();\n          fetchClassesByGate(\n            gate_id,\n            { visibility: quickFilter === 'all' ? undefined : quickFilter, page: pagination.page + 1 },\n            controller.signal,\n            true,\n            (err) => {\n              if (err && err.name !== 'AbortError') {\n                showNotification(err.message || 'Failed to load more classes', 'error');\n              }\n            }\n          );\n          return () => controller.abort();\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [classesLoading, pagination.hasMore, pagination.page, quickFilter, gate_id, fetchClassesByGate, showNotification]\n  );\n\n  const debouncedSetSearchQuery = useMemo(\n    () => debounce((value) => setSearchQuery(value), 300),\n    []\n  );\n\n  const fetchFunctions = useMemo(\n    () => [\n      (signal) =>\n        fetchGate(gate_id, signal, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch gate', 'error');\n          }\n        }),\n      (signal) =>\n        fetchGateMembersList(gate_id, signal, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch gate members', 'error');\n          }\n        }),\n      (signal) =>\n        fetchClassesByGate(\n          gate_id,\n          { page: 1, limit: pagination.limit },\n          signal,\n          false,\n          (err) => {\n            if (err && err.name !== 'AbortError') {\n              showNotification(err.message || 'Failed to fetch classes', 'error');\n            }\n          }\n        ),\n    ],\n    [fetchGate, fetchGateMembersList, fetchClassesByGate, gate_id, pagination.limit, showNotification]\n  );\n\n  const { isLoading, actionLoading, setActionLoading } = useEntity(fetchFunctions, token, handleLogout, navigate, 'gate');\n\n  useEffect(() => {\n    if (!gate_id?.trim()) {\n      showNotification('Invalid gate ID', 'error');\n      navigate('/gates');\n    }\n  }, [gate_id, navigate, showNotification]);\n\n  useEffect(() => {\n    const errors = [gateError, classesError].filter(Boolean);\n    errors.forEach((error) => {\n      if (error && error !== 'canceled') {\n        showNotification(error, 'error');\n      }\n    });\n  }, [gateError, classesError, showNotification]);\n\n  useEffect(() => {\n    if (!editingGate && editGateDialogOpen) {\n      setEditGateDialogOpen(false);\n    }\n    if (!editingClass && editClassDialogOpen) {\n      setEditClassDialogOpen(false);\n    }\n  }, [editingGate, editGateDialogOpen, editingClass, editClassDialogOpen]);\n\n  const filteredClasses = useMemo(\n    () => filterEntities(classesList || [], 'classes', quickFilter, searchQuery, gates || [], [{ gate_id }]),\n    [classesList, gates, quickFilter, searchQuery, gate_id]\n  );\n\n  const userRole = useMemo(\n    () => members?.find((m) => m.anonymous_id === authData?.anonymous_id)?.role || 'none',\n    [members, authData]\n  );\n  const isOwner = gateData?.creator_id === authData?.anonymous_id;\n  const canEdit = isOwner || userRole === 'admin';\n  const canDelete = isOwner;\n  const canCreateClass = gateData?.access?.is_public || userRole !== 'viewer';\n\n  const handleOpenCreateClass = useCallback(() => setCreateClassDialogOpen(true), []);\n  const handleCancelCreateClass = useCallback(() => {\n    setCreateClassDialogOpen(false);\n    setPopupClass({ ...DEFAULT_CLASS, gate_id });\n  }, [gate_id]);\n\n  const handleCreateClass = useCallback(async () => {\n    if (!popupClass.name?.trim()) {\n      showNotification('Class name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      const createdClass = await createNewClass({ ...popupClass, gate_id });\n      setCreateClassDialogOpen(false);\n      setPopupClass({ ...DEFAULT_CLASS, gate_id });\n      showNotification('Class created successfully!', 'success');\n      navigate(`/class/${createdClass.class_id}`);\n    } catch (err) {\n      showNotification(err.message || 'Failed to create class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [popupClass, createNewClass, gate_id, navigate, showNotification, setActionLoading]);\n\n  const handleUpdateClass = useCallback(async () => {\n    if (!editingClass?.name?.trim()) {\n      showNotification('Class name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingClass(editingClass.class_id, editingClass);\n      setEditClassDialogOpen(false);\n      setEditingClass(null);\n      showNotification('Class updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingClass, updateExistingClass, showNotification, setActionLoading]);\n\n  const handleDeleteClass = useCallback(async () => {\n    if (!classToDelete) return;\n    setActionLoading(true);\n    try {\n      await deleteExistingClass(classToDelete);\n      setDeleteClassDialogOpen(false);\n      setClassToDelete(null);\n      showNotification('Class deleted successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [classToDelete, deleteExistingClass, showNotification, setActionLoading]);\n\n  const handleUpdateGate = useCallback(async () => {\n    if (!editingGate?.name?.trim()) {\n      showNotification('Gate name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingGate(editingGate.gate_id, editingGate);\n      setEditGateDialogOpen(false);\n      setEditingGate(null);\n      showNotification('Gate updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update gate', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingGate, updateExistingGate, showNotification, setActionLoading]);\n\n  const handleDeleteGate = useCallback(async () => {\n    setActionLoading(true);\n    try {\n      await deleteExistingGate(gate_id);\n      setDeleteGateDialogOpen(false);\n      showNotification('Gate deleted successfully!', 'success');\n      navigate('/gates');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete gate', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [gate_id, deleteExistingGate, navigate, showNotification, setActionLoading]);\n\n  const handleFavoriteToggle = useCallback(async () => {\n    setActionLoading(true);\n    try {\n      await toggleFavoriteGate(gate_id, gateData?.is_favorited);\n      showNotification(\n        gateData?.is_favorited ? 'Gate removed from favorites!' : 'Gate added to favorites!',\n        'success'\n      );\n    } catch (err) {\n      showNotification(err.message || 'Failed to toggle favorite', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [gate_id, gateData, toggleFavoriteGate, showNotification, setActionLoading]);\n\n  const handleAddMember = useCallback(\n    async (id, memberData, isClass = false) => {\n      setActionLoading(true);\n      try {\n        const entity = isClass\n          ? classesList.find((c) => c.class_id === id)\n          : { members, settings: gateData?.settings };\n        if (entity?.members?.length >= entity?.settings?.max_members) {\n          showNotification('Maximum member limit reached!', 'error');\n          return;\n        }\n        await (isClass ? addMemberToClass : addMemberToGate)(id, memberData);\n        showNotification('Member added successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to add member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [addMemberToClass, addMemberToGate, classesList, members, gateData, showNotification, setActionLoading]\n  );\n\n  const handleRemoveMember = useCallback(\n    async (id, username, isClass = false) => {\n      setActionLoading(true);\n      try {\n        await (isClass ? removeMemberFromClass : removeMemberFromGate)(id, username);\n        showNotification('Member removed successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to remove member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [removeMemberFromClass, removeMemberFromGate, showNotification, setActionLoading]\n  );\n\n  const handleUpdateMemberRole = useCallback(\n    async (id, username, newRole, isClass = false) => {\n      setActionLoading(true);\n      try {\n        await (isClass ? updateClassMemberRole : updateGateMemberRole)(id, username, newRole);\n        showNotification('Member role updated successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to update member role', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [updateClassMemberRole, updateGateMemberRole, showNotification, setActionLoading]\n  );\n\n  const handleOpenClassMemberDialog = useCallback((classId) => {\n    setSelectedClassId(classId);\n    setMemberClassDialogOpen(true);\n  }, []);\n\n  const handleOpenGateMemberDialog = useCallback(() => {\n    setMemberGateDialogOpen(true);\n  }, []);\n\n  const handleSaveMembers = useCallback(\n    (isClass = false) => {\n      if (isClass) {\n        setMemberClassDialogOpen(false);\n        setSelectedClassId(null);\n      } else {\n        setMemberGateDialogOpen(false);\n      }\n      showNotification('Members updated successfully!', 'success');\n    },\n    [showNotification]\n  );\n\n  const handleCancelClassMemberDialog = useCallback(() => {\n    setMemberClassDialogOpen(false);\n    setSelectedClassId(null);\n  }, []);\n\n  const handleCancelGateMemberDialog = useCallback(() => {\n    setMemberGateDialogOpen(false);\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    setQuickFilter('all');\n    setSearchQuery('');\n    debouncedSetSearchQuery.cancel();\n    const controller = new AbortController();\n    fetchClassesByGate(gate_id, { page: 1, reset: { visibility: true } }, controller.signal, false, (err) => {\n      if (err && err.name !== 'AbortError') {\n        showNotification(err.message || 'Failed to reset filters', 'error');\n      }\n    });\n    return () => controller.abort();\n  }, [debouncedSetSearchQuery, fetchClassesByGate, gate_id, showNotification]);\n\n  const headerData = useMemo(\n    () => ({\n      type: 'gate',\n      title: gateData?.name || 'Untitled Gate',\n      titleAriaLabel: `Gate name: ${gateData?.name || 'Untitled Gate'}`,\n      description: gateData?.description || 'No description provided',\n      descriptionAriaLabel: gateData?.description ? `Gate description: ${gateData.description}` : undefined,\n      chips: [\n        {\n          label: gateData?.access?.is_public ? 'Public' : 'Private',\n          icon: gateData?.access?.is_public ? <Public /> : <Lock />,\n          color: gateData?.access?.is_public ? 'success' : 'default',\n          ariaLabel: gateData?.access?.is_public ? 'Public gate' : 'Private gate',\n        },\n        {\n          label: `Members: ${stats?.member_count || members?.length || 0}`,\n          icon: <People />,\n          color: 'primary',\n          ariaLabel: `Members: ${stats?.member_count || members?.length || 0}`,\n        },\n        {\n          label: `Classes: ${filteredClasses?.length || 0}`,\n          icon: <Forum />,\n          color: 'info',\n          ariaLabel: `Classes: ${filteredClasses?.length || 0}`,\n        },\n        {\n          label: `Favorites: ${stats?.favorite_count || 0}`,\n          icon: <Star />,\n          color: 'warning',\n          ariaLabel: `Favorites: ${stats?.favorite_count || 0}`,\n        },\n        {\n          label: `Owner: ${gateData?.creator?.username || 'Unknown'}`,\n          ariaLabel: `Owner: ${gateData?.creator?.username || 'Unknown'}`,\n        },\n      ],\n      actions: [\n        {\n          label: 'Create Class',\n          icon: <Add />,\n          onClick: handleOpenCreateClass,\n          tooltip: 'Create a new class within this gate',\n          disabled: actionLoading || gatesLoading || classesLoading || !canCreateClass,\n          ariaLabel: 'Create a new class',\n        },\n        {\n          label: 'Edit Gate',\n          onClick: () => {\n            setEditingGate({\n              gate_id: gateData?.gate_id,\n              name: gateData?.name || '',\n              description: gateData?.description || '',\n              is_public: gateData?.access?.is_public || false,\n              visibility: gateData?.access?.is_public ? 'public' : 'private',\n              settings: gateData?.settings || {\n                class_creation_cost: 100,\n                board_creation_cost: 50,\n                max_members: 1000,\n                ai_moderation_enabled: true,\n              },\n            });\n            setEditGateDialogOpen(true);\n          },\n          tooltip: 'Edit gate details and settings',\n          disabled: actionLoading || !canEdit,\n          ariaLabel: 'Edit gate',\n          isMenuItem: true,\n        },\n        {\n          label: 'Manage Members',\n          onClick: handleOpenGateMemberDialog,\n          tooltip: 'Manage gate members',\n          disabled: actionLoading || !canEdit,\n          ariaLabel: 'Manage gate members',\n          isMenuItem: true,\n        },\n        {\n          label: 'Delete Gate',\n          onClick: () => setDeleteGateDialogOpen(true),\n          tooltip: 'Permanently delete this gate',\n          disabled: actionLoading || !canDelete,\n          ariaLabel: 'Delete gate',\n          variant: 'delete',\n          isMenuItem: true,\n        },\n      ].filter((action) => action.label !== 'Create Class' || canCreateClass),\n      isFavorited: gateData?.is_favorited || false,\n      onFavoriteToggle: handleFavoriteToggle,\n      actionLoading,\n    }),\n    [\n      gateData,\n      stats,\n      members,\n      filteredClasses,\n      canEdit,\n      canDelete,\n      canCreateClass,\n      actionLoading,\n      gatesLoading,\n      classesLoading,\n      handleOpenCreateClass,\n      handleOpenGateMemberDialog,\n      handleFavoriteToggle,\n    ]\n  );\n\n  if (authLoading || isLoading) {\n    return (\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <LoadingSkeleton />\n      </AppLayout>\n    );\n  }\n\n  if (!isAuthenticated) {\n    navigate('/login', { state: { from: location.pathname } });\n    return null;\n  }\n\n  if (!gateData && gateError && gateError !== 'canceled') {\n    showNotification('Gate not found or failed to load', 'error');\n    navigate('/gates');\n    return null;\n  }\n\n  return (\n    <ErrorBoundary>\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <ProfileHeader user={authData} isOwnProfile={true} headerData={headerData} userRole={userRole} />\n        <EntityGrid\n          type=\"classes\"\n          items={filteredClasses}\n          cardComponent={CardMain}\n          itemKey=\"class_id\"\n          quickFilter={quickFilter}\n          setQuickFilter={setQuickFilter}\n          searchQuery={searchQuery}\n          setSearchQuery={debouncedSetSearchQuery}\n          filterOptions={CLASS_FILTER_OPTIONS}\n          onResetFilters={handleResetFilters}\n          handleFavorite={toggleFavoriteClass}\n          setEditingItem={(classItem) => {\n            setEditingClass(classItem);\n            setEditClassDialogOpen(true);\n          }}\n          setItemToDelete={setClassToDelete}\n          setDeleteDialogOpen={setDeleteClassDialogOpen}\n          handleManageMembers={handleOpenClassMemberDialog}\n          navigate={navigate}\n          currentUser={authData}\n          token={token}\n          onCreateNew={canCreateClass ? handleOpenCreateClass : null}\n          lastItemRef={lastClassElementRef}\n          hasMore={pagination.hasMore}\n          loading={classesLoading}\n          disabled={actionLoading || gatesLoading || classesLoading}\n        />\n        <EntityDialogs\n          type=\"classes\"\n          createOpen={createClassDialogOpen}\n          editOpen={editClassDialogOpen}\n          deleteOpen={deleteClassDialogOpen}\n          memberOpen={memberClassDialogOpen}\n          item={popupClass}\n          setItem={setPopupClass}\n          editingItem={editingClass}\n          setEditingItem={setEditingClass}\n          itemToDelete={classToDelete}\n          setItemToDelete={setClassToDelete}\n          onSaveCreate={handleCreateClass}\n          onSaveEdit={handleUpdateClass}\n          onCancelCreate={handleCancelCreateClass}\n          onCancelEdit={() => {\n            setEditClassDialogOpen(false);\n            setEditingClass(null);\n          }}\n          onConfirmDelete={handleDeleteClass}\n          onCloseDelete={() => {\n            setDeleteClassDialogOpen(false);\n            setClassToDelete(null);\n          }}\n          selectedId={selectedClassId}\n          members={classesList.find((c) => c.class_id === selectedClassId)?.members || []}\n          addMember={(id, memberData) => handleAddMember(id, memberData, true)}\n          removeMember={(id, username) => handleRemoveMember(id, username, true)}\n          updateMemberRole={(id, username, role) => handleUpdateMemberRole(id, username, role, true)}\n          onSaveMembers={() => handleSaveMembers(true)}\n          onCancelMembers={handleCancelClassMemberDialog}\n          disabled={actionLoading || gatesLoading || classesLoading}\n          loading={actionLoading}\n          token={token}\n          gates={gates}\n          classes={classesList}\n          currentGate={gateData}\n          fixedGateId={gate_id}\n          initialGateId={gate_id}\n        />\n        <EntityDialogs\n          type=\"gates\"\n          createOpen={false}\n          editOpen={editGateDialogOpen}\n          deleteOpen={deleteGateDialogOpen}\n          memberOpen={memberGateDialogOpen}\n          item={editingGate}\n          setItem={setEditingGate}\n          editingItem={editingGate}\n          setEditingItem={setEditingGate}\n          itemToDelete={gate_id}\n          setItemToDelete={() => {}}\n          onSaveCreate={() => {}}\n          onSaveEdit={handleUpdateGate}\n          onCancelCreate={() => {}}\n          onCancelEdit={() => {\n            setEditGateDialogOpen(false);\n            setEditingGate(null);\n          }}\n          onConfirmDelete={handleDeleteGate}\n          onCloseDelete={() => setDeleteGateDialogOpen(false)}\n          selectedId={gate_id}\n          members={members || []}\n          addMember={(id, memberData) => handleAddMember(id, memberData, false)}\n          removeMember={(id, username) => handleRemoveMember(id, username, false)}\n          updateMemberRole={(id, username, role) => handleUpdateMemberRole(id, username, role, false)}\n          onSaveMembers={() => handleSaveMembers(false)}\n          onCancelMembers={handleCancelGateMemberDialog}\n          disabled={actionLoading || gatesLoading}\n          loading={actionLoading}\n          token={token}\n          gates={gates}\n          classes={classesList}\n        />\n      </AppLayout>\n    </ErrorBoundary>\n  );\n};\n\nGatePage.propTypes = {\n  token: PropTypes.string,\n  authData: PropTypes.shape({\n    anonymous_id: PropTypes.string,\n    username: PropTypes.string,\n    avatar: PropTypes.string,\n    total_points: PropTypes.number,\n  }),\n  handleLogout: PropTypes.func,\n  isAuthenticated: PropTypes.bool,\n  authLoading: PropTypes.bool,\n};\n\nexport default React.memo(GatePage);","import React from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport Filters from '../Filters/Filters';\nimport Grids from '../Grids/Grids';\nimport { containerStyles } from '../../styles/BaseStyles';\n\nconst EntityGrid = ({\n  type,\n  items,\n  cardComponent: CardComponent,\n  itemKey,\n  quickFilter,\n  setQuickFilter,\n  searchQuery,\n  setSearchQuery,\n  filterOptions,\n  onResetFilters,\n  handleFavorite,\n  setEditingItem,\n  setItemToDelete,\n  setDeleteDialogOpen,\n  handleManageMembers,\n  navigate,\n  currentUser,\n  token,\n  onCreateNew,\n  disabled,\n  profileHeader,\n  lastItemRef,\n  hasMore,\n  loading,\n}) => {\n  return (\n    <Box sx={{ ...containerStyles, maxWidth: '1500px', mx: 'auto' }}>\n      {profileHeader}\n      <Filters\n        type={type}\n        quickFilter={quickFilter}\n        setQuickFilter={setQuickFilter}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        filterOptions={filterOptions}\n        onReset={onResetFilters}\n      />\n      <Grids\n        items={items}\n        cardComponent={CardComponent}\n        itemKey={itemKey}\n        gridType={type}\n        handleFavorite={handleFavorite}\n        setEditingItem={setEditingItem}\n        setItemToDelete={setItemToDelete}\n        setDeleteDialogOpen={setDeleteDialogOpen}\n        handleManageMembers={handleManageMembers}\n        navigate={navigate}\n        currentUser={currentUser}\n        token={token}\n        onCreateNew={onCreateNew}\n        disabled={disabled}\n        lastItemRef={lastItemRef}\n        hasMore={hasMore}\n      />\n      {loading && hasMore && (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n          <CircularProgress aria-label=\"Loading more items\" />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nEntityGrid.propTypes = {\n  type: PropTypes.string.isRequired,\n  items: PropTypes.array.isRequired,\n  cardComponent: PropTypes.elementType.isRequired,\n  itemKey: PropTypes.string.isRequired,\n  quickFilter: PropTypes.string.isRequired,\n  setQuickFilter: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ).isRequired,\n  onResetFilters: PropTypes.func.isRequired,\n  handleFavorite: PropTypes.func,\n  setEditingItem: PropTypes.func,\n  setItemToDelete: PropTypes.func,\n  setDeleteDialogOpen: PropTypes.func,\n  handleManageMembers: PropTypes.func,\n  navigate: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  token: PropTypes.string,\n  onCreateNew: PropTypes.func,\n  disabled: PropTypes.bool,\n  profileHeader: PropTypes.node,\n  lastItemRef: PropTypes.func,\n  hasMore: PropTypes.bool,\n  loading: PropTypes.bool,\n};\n\nexport default React.memo(EntityGrid);"],"names":["ErrorBoundary","_ref","children","hasError","setHasError","useState","useCallback","error","errorInfo","console","_jsx","GatePage","_gateData$access","_classesList$find","navigate","useNavigate","location","useLocation","gate_id","useParams","showNotification","useNotification","token","authData","handleLogout","isAuthenticated","loading","authLoading","useAuth","gate","gateData","members","stats","gates","fetchGate","fetchGateMembersList","updateExistingGate","deleteExistingGate","addMemberToGate","removeMemberFromGate","updateMemberRole","updateGateMemberRole","toggleFavoriteGate","gatesLoading","gateError","useGates","classes","classesList","pagination","fetchClassesByGate","createNewClass","updateExistingClass","deleteExistingClass","toggleFavoriteClass","addMemberToClass","removeMemberFromClass","updateClassMemberRole","classesLoading","classesError","useClasses","createClassDialogOpen","setCreateClassDialogOpen","editClassDialogOpen","setEditClassDialogOpen","deleteClassDialogOpen","setDeleteClassDialogOpen","memberClassDialogOpen","setMemberClassDialogOpen","editGateDialogOpen","setEditGateDialogOpen","deleteGateDialogOpen","setDeleteGateDialogOpen","memberGateDialogOpen","setMemberGateDialogOpen","editingClass","setEditingClass","classToDelete","setClassToDelete","selectedClassId","setSelectedClassId","editingGate","setEditingGate","popupClass","setPopupClass","DEFAULT_CLASS","quickFilter","setQuickFilter","searchQuery","setSearchQuery","observer","useRef","lastClassElementRef","node","hasMore","current","disconnect","IntersectionObserver","entries","isIntersecting","controller","AbortController","visibility","undefined","page","signal","err","name","message","abort","observe","debouncedSetSearchQuery","useMemo","debounce","value","fetchFunctions","limit","isLoading","actionLoading","setActionLoading","useEntity","useEffect","trim","filter","Boolean","forEach","filteredClasses","filterEntities","userRole","_members$find","find","m","anonymous_id","role","isOwner","creator_id","canEdit","canDelete","canCreateClass","access","is_public","handleOpenCreateClass","handleCancelCreateClass","handleCreateClass","async","_popupClass$name","createdClass","class_id","handleUpdateClass","_editingClass$name","handleDeleteClass","handleUpdateGate","_editingGate$name","handleDeleteGate","handleFavoriteToggle","is_favorited","handleAddMember","id","memberData","isClass","arguments","length","_entity$members","_entity$settings","entity","c","settings","max_members","handleRemoveMember","username","handleUpdateMemberRole","newRole","handleOpenClassMemberDialog","classId","handleOpenGateMemberDialog","handleSaveMembers","handleCancelClassMemberDialog","handleCancelGateMemberDialog","handleResetFilters","cancel","reset","headerData","_gateData$access2","_gateData$access3","_gateData$access4","_gateData$access5","_gateData$creator","_gateData$creator2","type","title","titleAriaLabel","description","descriptionAriaLabel","chips","label","icon","Public","Lock","color","ariaLabel","member_count","People","Forum","favorite_count","Star","creator","actions","Add","onClick","tooltip","disabled","_gateData$access6","_gateData$access7","class_creation_cost","board_creation_cost","ai_moderation_enabled","isMenuItem","variant","action","isFavorited","onFavoriteToggle","AppLayout","currentUser","onLogout","LoadingSkeleton","_jsxs","ProfileHeader","user","isOwnProfile","EntityGrid","items","cardComponent","CardMain","itemKey","filterOptions","CLASS_FILTER_OPTIONS","onResetFilters","handleFavorite","setEditingItem","classItem","setItemToDelete","setDeleteDialogOpen","handleManageMembers","onCreateNew","lastItemRef","EntityDialogs","createOpen","editOpen","deleteOpen","memberOpen","item","setItem","editingItem","itemToDelete","onSaveCreate","onSaveEdit","onCancelCreate","onCancelEdit","onConfirmDelete","onCloseDelete","selectedId","addMember","removeMember","onSaveMembers","onCancelMembers","currentGate","fixedGateId","initialGateId","state","from","pathname","React","CardComponent","profileHeader","Box","sx","containerStyles","maxWidth","mx","Filters","onReset","Grids","gridType","display","justifyContent","mt","CircularProgress"],"sourceRoot":""}