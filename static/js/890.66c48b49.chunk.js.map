{"version":3,"file":"static/js/890.66c48b49.chunk.js","mappings":"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","sources":["components/Forms/ResetPasswordForm/ResetPasswordForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Typography,\n  TextField,\n  Button,\n  Paper,\n  ThemeProvider,\n  Snackbar,\n  Alert,\n  Box,\n  InputAdornment,\n  IconButton,\n} from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport config from \"../../../config\";\nimport { inputStyles, actionButtonStyles } from \"../../../styles/BaseStyles\";\n\nconst ResetPasswordForm = ({ theme, onLogin }) => {\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    try {\n      const searchParams = new URLSearchParams(window.location.search);\n      const hashParams = new URLSearchParams(\n        window.location.hash.split(\"?\")[1] || \"\"\n      );\n      const tokenFromUrl =\n        searchParams.get(\"token\") || hashParams.get(\"token\");\n\n      if (tokenFromUrl) {\n        setToken(tokenFromUrl);\n        console.log(\"Token extracted from URL:\", tokenFromUrl);\n      } else {\n        setError(\n          \"No reset token found in the URL. Please check the link or request a new one.\"\n        );\n        console.error(\"No token found in URL\");\n      }\n    } catch (err) {\n      setError(\n        \"Invalid URL format. Please check the link or request a new one.\"\n      );\n      console.error(\"Error parsing URL:\", err);\n    }\n  }, []);\n\n  const validateInputs = () => {\n    const passwordRegex =\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/;\n\n    if (!newPassword) return \"New password is required\";\n    if (!passwordRegex.test(newPassword))\n      return \"Password must contain at least 8 characters, uppercase, lowercase, and a number\";\n    if (newPassword.length > 128)\n      return \"Password cannot exceed 128 characters\";\n    if (newPassword !== confirmPassword) return \"Passwords do not match\";\n    if (!token) return \"Reset token is missing\";\n    return null;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    setSuccess(\"\");\n    setIsSubmitting(true);\n\n    const validationError = validateInputs();\n    if (validationError) {\n      setError(validationError);\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      console.log(\"Sending reset password request with:\", {\n        token,\n        newPassword,\n      });\n      const response = await axios.post(\n        `${config.REACT_APP_HUB_API_URL}/api/v1/auth/set-password`,\n        {\n          token,\n          newPassword,\n        }\n      );\n      console.log(\"Response from server:\", response.data);\n\n      const { token: jwtToken, profile } = response.data;\n      if (!jwtToken || !profile) {\n        throw new Error(\n          \"Invalid reset password response: Missing token or profile\"\n        );\n      }\n\n      onLogin(jwtToken, profile);\n      localStorage.setItem(\"token\", jwtToken);\n      setSuccess(\"Password successfully changed! Logging you in...\");\n    } catch (err) {\n      console.error(\n        \"Error during reset password:\",\n        err.response?.data || err\n      );\n      const errorMessage =\n        err.response?.status === 400\n          ? \"Invalid or expired reset token. Please request a new one.\"\n          : err.response?.data?.errors?.[0] ||\n            err.response?.data?.message ||\n            \"Network error, please try again\";\n      setError(errorMessage);\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleBackToLogin = () => navigate(\"/login\", { replace: true });\n  const handleCloseSnackbar = () => {\n    setError(\"\");\n    setSuccess(\"\");\n  };\n\n  useEffect(() => {\n    if (success) {\n      const timer = setTimeout(() => navigate(\"/home\"), 3000);\n      return () => clearTimeout(timer);\n    }\n  }, [success, navigate]);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container\n        maxWidth=\"sm\"\n        sx={{\n          minHeight: \"100vh\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Paper\n          elevation={6}\n          sx={{\n            p: theme.spacing(5),\n            borderRadius: theme.shape.borderRadiusMedium,\n            backgroundColor: \"background.paper\",\n            boxShadow: \"0 8px 24px rgba(0, 0, 0, 0.1)\",\n            width: \"100%\",\n            maxWidth: theme.custom.loginPaperMaxWidth,\n            textAlign: \"center\",\n          }}\n        >\n          <Box sx={{ textAlign: \"center\", mb: theme.spacing(3) }}>\n            <Typography\n              variant=\"h4\"\n              sx={{ color: \"text.primary\", fontWeight: 600 }}\n            >\n              Create Password\n            </Typography>\n            <Typography\n              variant=\"body1\"\n              sx={{ color: \"text.secondary\", mt: theme.spacing(1) }}\n            >\n              Start your journey from here\n            </Typography>\n          </Box>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: theme.spacing(2), textAlign: \"left\" }}\n            aria-label=\"Reset password form\"\n          >\n            <TextField\n              label=\"New Password\"\n              type={showNewPassword ? \"text\" : \"password\"}\n              fullWidth\n              margin=\"normal\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={() => setShowNewPassword(!showNewPassword)}\n                      edge=\"end\"\n                      aria-label={\n                        showNewPassword\n                          ? \"Hide new password\"\n                          : \"Show new password\"\n                      }\n                      sx={{ color: \"text.primary\" }}\n                    >\n                      {showNewPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              required\n              error={!!error && error.includes(\"password\")}\n              aria-describedby={\n                error && error.includes(\"password\")\n                  ? \"new-password-error\"\n                  : undefined\n              }\n              sx={inputStyles}\n            />\n            <TextField\n              label=\"Confirm Password\"\n              type={showConfirmPassword ? \"text\" : \"password\"}\n              fullWidth\n              margin=\"normal\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={() =>\n                        setShowConfirmPassword(!showConfirmPassword)\n                      }\n                      edge=\"end\"\n                      aria-label={\n                        showConfirmPassword\n                          ? \"Hide confirm password\"\n                          : \"Show confirm password\"\n                      }\n                      sx={{ color: \"text.primary\" }}\n                    >\n                      {showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              required\n              error={!!error && error.includes(\"Passwords do not match\")}\n              aria-describedby={\n                error && error.includes(\"Passwords do not match\")\n                  ? \"confirm-password-error\"\n                  : undefined\n              }\n              sx={inputStyles}\n            />\n\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                mt: theme.spacing(3),\n                gap: theme.spacing(3),\n                alignItems: \"center\",\n              }}\n            >\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                disabled={isSubmitting}\n                fullWidth\n                sx={actionButtonStyles}\n                aria-label=\"Change password\"\n              >\n                {isSubmitting ? \"Changing Password...\" : \"Change Password\"}\n              </Button>\n              <Button\n                variant=\"text\"\n                onClick={handleBackToLogin}\n                sx={{\n                  color: \"text.primary\",\n                  textTransform: \"none\",\n                  fontSize: \"16px\",\n                  padding: \"8px 20px\",\n                  borderRadius: \"20px\",\n                  \"&:hover\": { textDecoration: \"underline\" },\n                }}\n                aria-label=\"Back to login\"\n              >\n                Back to Login\n              </Button>\n            </Box>\n          </Box>\n        </Paper>\n      </Container>\n      <Snackbar\n        open={Boolean(error)}\n        autoHideDuration={3000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      >\n        <Alert\n          onClose={handleCloseSnackbar}\n          severity=\"error\"\n          sx={{ width: \"100%\" }}\n          role=\"alert\"\n        >\n          {error}\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={Boolean(success)}\n        autoHideDuration={3000}\n        onClose={handleCloseSnackbar}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n      >\n        <Alert\n          onClose={handleCloseSnackbar}\n          severity=\"success\"\n          sx={{ width: \"100%\" }}\n          role=\"alert\"\n        >\n          {success}\n        </Alert>\n      </Snackbar>\n    </ThemeProvider>\n  );\n};\n\nexport default ResetPasswordForm;\n"],"names":["_ref","theme","onLogin","newPassword","setNewPassword","useState","confirmPassword","setConfirmPassword","token","setToken","error","setError","success","setSuccess","showNewPassword","setShowNewPassword","showConfirmPassword","setShowConfirmPassword","isSubmitting","setIsSubmitting","navigate","useNavigate","useEffect","searchParams","URLSearchParams","window","location","search","hashParams","hash","split","tokenFromUrl","get","console","log","err","handleCloseSnackbar","timer","setTimeout","clearTimeout","_jsxs","ThemeProvider","children","_jsx","Container","maxWidth","sx","minHeight","display","alignItems","justifyContent","Paper","elevation","p","spacing","borderRadius","shape","borderRadiusMedium","backgroundColor","boxShadow","width","custom","loginPaperMaxWidth","textAlign","Box","mb","Typography","variant","color","fontWeight","mt","component","onSubmit","async","e","preventDefault","validationError","test","length","response","axios","post","config","REACT_APP_HUB_API_URL","data","jwtToken","profile","Error","localStorage","setItem","_err$response","_err$response2","_err$response3","_err$response3$data","_err$response3$data$e","_err$response4","_err$response4$data","errorMessage","status","errors","message","noValidate","TextField","label","type","fullWidth","margin","value","onChange","target","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","edge","Visibility","VisibilityOff","required","includes","undefined","inputStyles","flexDirection","gap","Button","disabled","actionButtonStyles","handleBackToLogin","replace","textTransform","fontSize","padding","textDecoration","Snackbar","open","Boolean","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Alert","severity","role"],"sourceRoot":""}