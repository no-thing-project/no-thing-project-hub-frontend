{"version":3,"file":"static/js/728.c4b25117.chunk.js","mappings":"oXAoBA,MAAMA,EAAgBC,IAAmB,IAAlB,SAAEC,GAAUD,EACjC,MAAOE,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAErBC,EAAAA,EAAAA,cAAY,CAACC,EAAOC,KACtCC,QAAQF,MAAM,wBAAyBA,EAAOC,GAC9CJ,GAAY,EAAK,GAChB,IAEH,OAAID,GACKO,EAAAA,EAAAA,KAAA,OAAAR,SAAK,kDAGPA,CAAQ,EAGXS,EAAcA,KAAO,IAADC,EACxB,MAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,iBAAEC,IAAqBC,EAAAA,EAAAA,MACvB,MAAEC,EAAK,SAAEC,EAAQ,aAAEC,EAAY,gBAAEC,EAAiBC,QAASC,IAAgBC,EAAAA,EAAAA,MAC3E,QACJC,EAAO,WACPC,EAAU,iBACVC,EAAgB,eAChBC,EAAc,oBACdC,EAAmB,oBACnBC,EAAmB,iBACnBC,EAAgB,sBAChBC,EAAqB,iBACrBC,EAAgB,oBAChBC,EACAZ,QAASa,EACT7B,MAAO8B,IACLC,EAAAA,EAAAA,GAAWnB,EAAOE,EAAcR,GAAU,IACxC,MAAE0B,EAAK,eAAEC,EAAgBjB,QAASkB,EAAclC,MAAOmC,IAAeC,EAAAA,EAAAA,GAASxB,EAAOE,EAAcR,IAEnG+B,EAAkBC,IAAuBxC,EAAAA,EAAAA,WAAS,IAClDyC,EAAgBC,IAAqB1C,EAAAA,EAAAA,WAAS,IAC9C2C,EAAkBC,IAAuB5C,EAAAA,EAAAA,WAAS,IAClD6C,EAAkBC,IAAuB9C,EAAAA,EAAAA,WAAS,IAClD+C,EAAcC,KAAmBhD,EAAAA,EAAAA,UAAS,OAC1CiD,GAAiBC,KAAsBlD,EAAAA,EAAAA,UAAS,OAChDmD,GAAeC,KAAoBpD,EAAAA,EAAAA,UAAS,OAC5CqD,GAAYC,KAAiBtD,EAAAA,EAAAA,UAASuD,EAAAA,KACtCC,GAAaC,KAAkBzD,EAAAA,EAAAA,UAAS,QACxC0D,GAAaC,KAAkB3D,EAAAA,EAAAA,UAAS,IAEzC4D,IAAWC,EAAAA,EAAAA,UACXC,IAAsB7D,EAAAA,EAAAA,cACzB8D,KACKhC,GAAmBT,EAAW0C,UAC9BJ,GAASK,SAASL,GAASK,QAAQC,aACvCN,GAASK,QAAU,IAAIE,sBAAsBC,IAC3C,GAAIA,EAAQ,GAAGC,gBAAkB/C,EAAW0C,QAAS,CACnD,MAAMM,EAAa,IAAIC,gBAWvB,OAVAhD,EACE,CAAEiD,WAA4B,QAAhBhB,QAAwBiB,EAAYjB,GAAakB,KAAMpD,EAAWoD,KAAO,GACvFJ,EAAWK,QACX,GACCC,IACKA,GAAoB,eAAbA,EAAIC,MACbjE,EAAiBgE,EAAIE,SAAW,8BAA+B,QACjE,IAGG,IAAMR,EAAWS,OAC1B,KAEEhB,GAAMH,GAASK,QAAQe,QAAQjB,GAAK,GAE1C,CAAChC,EAAgBT,EAAW0C,QAAS1C,EAAWoD,KAAMlB,GAAajC,EAAkBX,IAGjFqE,IAAyBC,EAAAA,EAAAA,UAC7B,IAAM,CACJ,IACE3D,EAAiB,CAAEmD,KAAM,EAAGS,MAAO7D,EAAW6D,OAAS,MAAM,GAAQP,IAC/DA,GAAoB,eAAbA,EAAIC,MACbjE,EAAiBgE,EAAIE,SAAW,0BAA2B,QAC7D,MAGN,CAACvD,EAAkBD,EAAW6D,MAAOvE,KAGjC,UAAEwE,GAAS,cAAEC,GAAa,iBAAEC,KAAqBC,EAAAA,EAAAA,GACrDN,GACAnE,EACAE,EACAR,EACA,WAGIgF,IAA0BN,EAAAA,EAAAA,UAC9B,KAAMO,EAAAA,EAAAA,WAAUC,GAAU/B,GAAe+B,IAAQ,MACjD,KAGFC,EAAAA,EAAAA,YAAU,KACJ3D,GAAiC,aAAjBA,GAClBpB,EAAiBoB,EAAc,SAE7BK,GAA6B,aAAfA,GAChBzB,EAAiByB,EAAY,QAC/B,GACC,CAACL,EAAcK,EAAYzB,IAE9B,MAAMgF,IAAkBV,EAAAA,EAAAA,UACtB,KAAMW,EAAAA,EAAAA,GAAexE,GAAW,GAAI,UAAWmC,GAAaE,GAAaxB,GAAS,KAClF,CAACb,EAASa,EAAOsB,GAAaE,MAGhCiC,EAAAA,EAAAA,YAAU,KACR,GAAIjC,IAA+B,QAAhBF,GAAuB,CACxC,MAAMc,EAAa,IAAIC,gBAMvB,OALApC,EAAe,CAAEqC,WAAY,UAAYF,EAAWK,QAAQ,GAAQC,IAC9DA,GAAoB,eAAbA,EAAIC,MACbjE,EAAiBgE,EAAIE,SAAW,wBAAyB,QAC3D,IAEK,IAAMR,EAAWS,OAC1B,IACC,CAACrB,GAAaF,GAAarB,EAAgBvB,IAE9C,MAAMkF,IAAmB7F,EAAAA,EAAAA,cAAY,IAAMuC,GAAoB,IAAO,IAChEuD,IAAqB9F,EAAAA,EAAAA,cAAY,KACrCuC,GAAoB,GACpBc,GAAcC,EAAAA,GAAc,GAC3B,IAEGyC,IAAe/F,EAAAA,EAAAA,cACnBgG,UAAmB,IAADC,EAChB,GAAoB,QAAhBA,EAAC7C,GAAWwB,YAAI,IAAAqB,GAAfA,EAAiBC,OAAtB,CAIAb,IAAiB,GACjB,IACE,MAAMc,QAAqB5E,EAAe,IACrC6B,GACHgD,QAASC,GAAUjD,GAAWgD,UAEhC7D,GAAoB,GACpBc,GAAcC,EAAAA,IACd3C,EAAiB,8BAA+B,WAChDJ,EAAS,UAAU4F,EAAaG,WAClC,CAAE,MAAO3B,GACPhE,EAAiBgE,EAAIE,SAAW,yBAA0B,QAC5D,CAAC,QACCQ,IAAiB,EACnB,CAfA,MAFE1E,EAAiB,0BAA2B,QAiB9C,GAEF,CAACyC,GAAY7B,EAAgBhB,EAAUI,EAAkB0E,KAGrDkB,IAAevG,EAAAA,EAAAA,cAAYgG,UAAa,IAADQ,EAC3C,GAAiB,OAAZ1D,QAAY,IAAZA,GAAkB,QAAN0D,EAAZ1D,EAAc8B,YAAI,IAAA4B,GAAlBA,EAAoBN,OAAzB,CAIAb,IAAiB,GACjB,UACQ7D,EAAoBsB,EAAawD,SAAUxD,GACjDL,GAAkB,GAClBM,GAAgB,MAChBpC,EAAiB,8BAA+B,UAClD,CAAE,MAAOgE,GACPhE,EAAiBgE,EAAIE,SAAW,yBAA0B,QAC5D,CAAC,QACCQ,IAAiB,EACnB,CAXA,MAFE1E,EAAiB,0BAA2B,QAa9C,GACC,CAACmC,EAActB,EAAqBb,EAAkB0E,KAEnDoB,IAAezG,EAAAA,EAAAA,cAAYgG,UAC/B,GAAK9C,GAAL,CACAmC,IAAiB,GACjB,UACQ5D,EAAoByB,IAC1BL,GAAoB,GACpBM,GAAiB,MACjBxC,EAAiB,8BAA+B,UAClD,CAAE,MAAOgE,GACPhE,EAAiBgE,EAAIE,SAAW,yBAA0B,QAC5D,CAAC,QACCQ,IAAiB,EACnB,CAX0B,CAW1B,GACC,CAACnC,GAAezB,EAAqBd,EAAkB0E,KAEpDqB,IAAkB1G,EAAAA,EAAAA,cACtBgG,MAAOW,EAASC,KACdvB,IAAiB,GACjB,IAAK,IAADwB,EAAAC,EACF,MAAMC,EAAM3F,EAAQ4F,MAAMC,GAAMA,EAAEX,WAAaK,IAC/C,IAAO,OAAHI,QAAG,IAAHA,GAAY,QAATF,EAAHE,EAAKG,eAAO,IAAAL,OAAT,EAAHA,EAAcM,UAAa,OAAHJ,QAAG,IAAHA,GAAa,QAAVD,EAAHC,EAAKK,gBAAQ,IAAAN,OAAV,EAAHA,EAAeO,aAEzC,YADA1G,EAAiB,gCAAiC,eAG9Ce,EAAiBiF,EAASC,GAChCjG,EAAiB,6BAA8B,UACjD,CAAE,MAAOgE,GACPhE,EAAiBgE,EAAIE,SAAW,uBAAwB,QAC1D,CAAC,QACCQ,IAAiB,EACnB,IAEF,CAAC3D,EAAkBf,EAAkBS,EAASiE,KAG1CiC,IAAqBtH,EAAAA,EAAAA,cACzBgG,MAAOW,EAASY,KACdlC,IAAiB,GACjB,UACQ1D,EAAsBgF,EAASY,GACrC5G,EAAiB,+BAAgC,UACnD,CAAE,MAAOgE,GACPhE,EAAiBgE,EAAIE,SAAW,0BAA2B,QAC7D,CAAC,QACCQ,IAAiB,EACnB,IAEF,CAAC1D,EAAuBhB,EAAkB0E,KAGtCmC,IAAyBxH,EAAAA,EAAAA,cAC7BgG,MAAOW,EAASY,EAAUE,KACxBpC,IAAiB,GACjB,UACQzD,EAAiB+E,EAASY,EAAUE,GAC1C9G,EAAiB,oCAAqC,UACxD,CAAE,MAAOgE,GACPhE,EAAiBgE,EAAIE,SAAW,+BAAgC,QAClE,CAAC,QACCQ,IAAiB,EACnB,IAEF,CAACzD,EAAkBjB,EAAkB0E,KAGjCqC,IAAyB1H,EAAAA,EAAAA,cAAa2G,IAC1C1D,GAAmB0D,GACnBhE,GAAoB,EAAK,GACxB,IAEGgF,IAAoB3H,EAAAA,EAAAA,cAAY,KACpC2C,GAAoB,GACpBM,GAAmB,MACnBtC,EAAiB,gCAAiC,UAAU,GAC3D,CAACA,IAEEiH,IAA2B5H,EAAAA,EAAAA,cAAY,KAC3C2C,GAAoB,GACpBM,GAAmB,KAAK,GACvB,IAEG4E,IAAqB7H,EAAAA,EAAAA,cAAY,KACrCwD,GAAe,OACfE,GAAe,IACf6B,GAAwBuC,SACxBxG,EAAiB,CAAEmD,KAAM,EAAGsD,MAAO,CAAExD,YAAY,IAAU,MAAM,GAAQI,IACnEA,GAAoB,eAAbA,EAAIC,MACbjE,EAAiBgE,EAAIE,SAAW,0BAA2B,QAC7D,GACA,GACD,CAACU,GAAyBjE,EAAkBX,IAEzCqH,IAAa/C,EAAAA,EAAAA,UACjB,MACEgD,KAAM,OACNC,MAAO,UACPC,eAAgB,eAChBC,iBAAkB,yBAClBC,mBACE,4IACFC,QAAS,CACP,CACEC,MAAO,eACPC,MAAMpI,EAAAA,EAAAA,KAACqI,EAAAA,EAAG,IACVC,QAAS7C,GACT8C,QAAS,qBACTC,SAAUxD,IAAiBtD,GAAkBK,EAC7C0G,UAAW,0BAIjB,CAAChD,GAAkBT,GAAetD,EAAgBK,IAGpD,OAAIjB,GAAeiE,IAEf/E,EAAAA,EAAAA,KAAC0I,EAAAA,EAAS,CAACC,YAAajI,EAAUkI,SAAUjI,EAAcF,MAAOA,EAAMjB,UACrEQ,EAAAA,EAAAA,KAAC6I,EAAAA,EAAe,MAKjBjI,GAMHZ,EAAAA,EAAAA,KAACV,EAAa,CAAAE,UACZsJ,EAAAA,EAAAA,MAACJ,EAAAA,EAAS,CAACC,YAAajI,EAAUkI,SAAUjI,EAAcF,MAAOA,EAAMjB,SAAA,EACrEQ,EAAAA,EAAAA,KAAC+I,EAAAA,EAAa,CAACC,KAAMtI,EAAUuI,cAAc,EAAMrB,WAAYA,MAC/D5H,EAAAA,EAAAA,KAACkJ,EAAAA,EAAU,CACTrB,KAAK,UACLsB,MAAO5D,GACP6D,cAAeC,EAAAA,EACfC,QAAQ,WACRnG,YAAaA,GACbC,eAAgBA,GAChBC,YAAaA,GACbC,eAAgB6B,GAChBoE,cAAeC,EAAAA,GACfC,eAAgBhC,GAChBiC,eAAgBjI,EAChBkI,eAAiBC,IACfjH,GAAgBiH,GAChBvH,GAAkB,EAAK,EAEzBwH,gBAAiB9G,GACjBN,oBAAqBA,EACrBqH,oBAAqBxC,GACrBnH,SAAUA,EACVwI,YAAajI,EACbD,MAAOA,EACPsJ,YAAatE,GACbuE,YAAavG,GACbE,QAAS1C,EAAW0C,QACpB9C,QAASa,EACT8G,SAAUxD,IAAiBtD,GAAkBK,KAE/C/B,EAAAA,EAAAA,KAACiK,EAAAA,EAAa,CACZpC,KAAK,UACLqC,WAAYhI,EACZiI,SAAU/H,EACVgI,WAAY5H,EACZ6H,WAAY/H,EACZsH,KAAM5G,GACNsH,QAASrH,GACTsH,YAAa7H,EACbiH,eAAgBhH,GAChB6H,aAAc1H,GACd+G,gBAAiB9G,GACjB0H,aAAc9E,GACd+E,WAAYvE,GACZwE,eAAgBjF,GAChBkF,aAAcA,KACZvI,GAAkB,GAClBM,GAAgB,KAAK,EAEvBkI,gBAAiBxE,GACjByE,cAAeA,KACbrI,GAAoB,GACpBM,GAAiB,KAAK,EAExBgI,WAAYnI,GACZkE,SAA4D,QAAnD5G,EAAAc,EAAQ4F,MAAMC,GAAMA,EAAEX,WAAatD,YAAgB,IAAA1C,OAAA,EAAnDA,EAAqD4G,UAAW,GACzEkE,UAAW1E,GACX2E,aAAc/D,GACd1F,iBAAkB4F,GAClB8D,cAAe3D,GACf4D,gBAAiB3D,GACjBgB,SAAUxD,IAAiBtD,EAC3Bb,QAASmE,GACTvE,MAAOA,EACPoB,MAAOA,UAtEb1B,EAAS,SAAU,CAAEiL,MAAO,CAAEC,KAAMhL,EAASiL,YACtC,KAwES,EAgBpB,EAAeC,EAAAA,KAAWtL,E,2GC9Y1B,MAAMiJ,EAAa3J,IAyBZ,IAzBa,KAClBsI,EAAI,MACJsB,EACAC,cAAeoC,EAAa,QAC5BlC,EAAO,YACPnG,EAAW,eACXC,EAAc,YACdC,EAAW,eACXC,EAAc,cACdiG,EAAa,eACbE,EAAc,eACdC,EAAc,eACdC,EAAc,gBACdE,EAAe,oBACfpH,EAAmB,oBACnBqH,EAAmB,SACnB3J,EAAQ,YACRwI,EAAW,MACXlI,EAAK,YACLsJ,EAAW,SACXvB,EAAQ,cACRiD,EAAa,YACbzB,EAAW,QACXrG,EAAO,QACP9C,GACDtB,EACC,OACEuJ,EAAAA,EAAAA,MAAC4C,EAAAA,EAAG,CAACC,GAAI,IAAKC,EAAAA,GAAiBC,SAAU,SAAUC,GAAI,QAAStM,SAAA,CAC7DiM,GACDzL,EAAAA,EAAAA,KAAC+L,EAAAA,EAAO,CACNlE,KAAMA,EACN1E,YAAaA,EACbC,eAAgBA,EAChBC,YAAaA,EACbC,eAAgBA,EAChBiG,cAAeA,EACfyC,QAASvC,KAEXzJ,EAAAA,EAAAA,KAACiM,EAAAA,EAAK,CACJ9C,MAAOA,EACPC,cAAeoC,EACflC,QAASA,EACT4C,SAAUrE,EACV6B,eAAgBA,EAChBC,eAAgBA,EAChBE,gBAAiBA,EACjBpH,oBAAqBA,EACrBqH,oBAAqBA,EACrB3J,SAAUA,EACVwI,YAAaA,EACblI,MAAOA,EACPsJ,YAAaA,EACbvB,SAAUA,EACVwB,YAAaA,EACbrG,QAASA,IAEV9C,GAAW8C,IACV3D,EAAAA,EAAAA,KAAC0L,EAAAA,EAAG,CAACC,GAAI,CAAEQ,QAAS,OAAQC,eAAgB,SAAUC,GAAI,GAAI7M,UAC5DQ,EAAAA,EAAAA,KAACsM,EAAAA,EAAgB,CAAC,aAAW,2BAG7B,EAoCV,EAAef,EAAAA,KAAWrC,E","sources":["pages/ClassesPage.jsx","components/Common/EntityGrid.jsx"],"sourcesContent":["import React, { useState, useCallback, useMemo, useEffect, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { Add } from '@mui/icons-material';\nimport { debounce } from 'lodash';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/Layout/AppLayout';\nimport ProfileHeader from '../components/Headers/ProfileHeader';\nimport useAuth from '../hooks/useAuth';\nimport { useClasses } from '../hooks/useClasses';\nimport { useGates } from '../hooks/useGates';\nimport { useEntity } from '../hooks/useEntity';\nimport { useNotification } from '../context/NotificationContext';\nimport CardMain from '../components/Cards/CardMain';\nimport EntityGrid from '../components/Common/EntityGrid';\nimport EntityDialogs from '../components/Common/EntityDialogs';\nimport LoadingSkeleton from '../components/Common/LoadingSkeleton';\nimport { filterEntities } from '../utils/filterUtils';\nimport { DEFAULT_CLASS } from '../constants/default';\nimport { CLASS_FILTER_OPTIONS } from '../constants/filterOptions';\n\nconst ErrorBoundary = ({ children }) => {\n  const [hasError, setHasError] = useState(false);\n\n  const handleError = useCallback((error, errorInfo) => {\n    console.error('ErrorBoundary caught:', error, errorInfo);\n    setHasError(true);\n  }, []);\n\n  if (hasError) {\n    return <div>Something went wrong. Please try again later.</div>;\n  }\n\n  return children;\n};\n\nconst ClassesPage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { showNotification } = useNotification();\n  const { token, authData, handleLogout, isAuthenticated, loading: authLoading } = useAuth();\n  const {\n    classes,\n    pagination,\n    fetchClassesList,\n    createNewClass,\n    updateExistingClass,\n    deleteExistingClass,\n    addMemberToClass,\n    removeMemberFromClass,\n    updateMemberRole,\n    toggleFavoriteClass,\n    loading: classesLoading,\n    error: classesError,\n  } = useClasses(token, handleLogout, navigate, false);\n  const { gates, fetchGatesList, loading: gatesLoading, error: gatesError } = useGates(token, handleLogout, navigate);\n\n  const [createDialogOpen, setCreateDialogOpen] = useState(false);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [memberDialogOpen, setMemberDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState(null);\n  const [selectedClassId, setSelectedClassId] = useState(null);\n  const [classToDelete, setClassToDelete] = useState(null);\n  const [popupClass, setPopupClass] = useState(DEFAULT_CLASS);\n  const [quickFilter, setQuickFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const observer = useRef();\n  const lastClassElementRef = useCallback(\n    (node) => {\n      if (classesLoading || !pagination.hasMore) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver((entries) => {\n        if (entries[0].isIntersecting && pagination.hasMore) {\n          const controller = new AbortController();\n          fetchClassesList(\n            { visibility: quickFilter === 'all' ? undefined : quickFilter, page: pagination.page + 1 },\n            controller.signal,\n            true,\n            (err) => {\n              if (err && err.name !== 'AbortError') {\n                showNotification(err.message || 'Failed to load more classes', 'error');\n              }\n            }\n          );\n          return () => controller.abort();\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [classesLoading, pagination.hasMore, pagination.page, quickFilter, fetchClassesList, showNotification]\n  );\n\n  const stableFetchClassesList = useMemo(\n    () => [\n      () =>\n        fetchClassesList({ page: 1, limit: pagination.limit }, null, false, (err) => {\n          if (err && err.name !== 'AbortError') {\n            showNotification(err.message || 'Failed to fetch classes', 'error');\n          }\n        }),\n    ],\n    [fetchClassesList, pagination.limit, showNotification]\n  );\n\n  const { isLoading, actionLoading, setActionLoading } = useEntity(\n    stableFetchClassesList,\n    token,\n    handleLogout,\n    navigate,\n    'classes'\n  );\n\n  const debouncedSetSearchQuery = useMemo(\n    () => debounce((value) => setSearchQuery(value), 300),\n    []\n  );\n\n  useEffect(() => {\n    if (classesError && classesError !== 'canceled') {\n      showNotification(classesError, 'error');\n    }\n    if (gatesError && gatesError !== 'canceled') {\n      showNotification(gatesError, 'error');\n    }\n  }, [classesError, gatesError, showNotification]);\n\n  const filteredClasses = useMemo(\n    () => filterEntities(classes || [], 'classes', quickFilter, searchQuery, gates || []),\n    [classes, gates, quickFilter, searchQuery]\n  );\n\n  useEffect(() => {\n    if (searchQuery || quickFilter !== 'all') {\n      const controller = new AbortController();\n      fetchGatesList({ visibility: 'public' }, controller.signal, false, (err) => {\n        if (err && err.name !== 'AbortError') {\n          showNotification(err.message || 'Failed to fetch gates', 'error');\n        }\n      });\n      return () => controller.abort();\n    }\n  }, [searchQuery, quickFilter, fetchGatesList, showNotification]);\n\n  const handleOpenCreate = useCallback(() => setCreateDialogOpen(true), []);\n  const handleCancelCreate = useCallback(() => {\n    setCreateDialogOpen(false);\n    setPopupClass(DEFAULT_CLASS);\n  }, []);\n\n  const handleCreate = useCallback(\n    async (gateId) => {\n      if (!popupClass.name?.trim()) {\n        showNotification('Class name is required!', 'error');\n        return;\n      }\n      setActionLoading(true);\n      try {\n        const createdClass = await createNewClass({\n          ...popupClass,\n          gate_id: gateId || popupClass.gate_id,\n        });\n        setCreateDialogOpen(false);\n        setPopupClass(DEFAULT_CLASS);\n        showNotification('Class created successfully!', 'success');\n        navigate(`/class/${createdClass.class_id}`);\n      } catch (err) {\n        showNotification(err.message || 'Failed to create class', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [popupClass, createNewClass, navigate, showNotification, setActionLoading]\n  );\n\n  const handleUpdate = useCallback(async () => {\n    if (!editingClass?.name?.trim()) {\n      showNotification('Class name is required!', 'error');\n      return;\n    }\n    setActionLoading(true);\n    try {\n      await updateExistingClass(editingClass.class_id, editingClass);\n      setEditDialogOpen(false);\n      setEditingClass(null);\n      showNotification('Class updated successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to update class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [editingClass, updateExistingClass, showNotification, setActionLoading]);\n\n  const handleDelete = useCallback(async () => {\n    if (!classToDelete) return;\n    setActionLoading(true);\n    try {\n      await deleteExistingClass(classToDelete);\n      setDeleteDialogOpen(false);\n      setClassToDelete(null);\n      showNotification('Class deleted successfully!', 'success');\n    } catch (err) {\n      showNotification(err.message || 'Failed to delete class', 'error');\n    } finally {\n      setActionLoading(false);\n    }\n  }, [classToDelete, deleteExistingClass, showNotification, setActionLoading]);\n\n  const handleAddMember = useCallback(\n    async (classId, memberData) => {\n      setActionLoading(true);\n      try {\n        const cls = classes.find((c) => c.class_id === classId);\n        if (cls?.members?.length >= cls?.settings?.max_members) {\n          showNotification('Maximum member limit reached!', 'error');\n          return;\n        }\n        await addMemberToClass(classId, memberData);\n        showNotification('Member added successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to add member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [addMemberToClass, showNotification, classes, setActionLoading]\n  );\n\n  const handleRemoveMember = useCallback(\n    async (classId, username) => {\n      setActionLoading(true);\n      try {\n        await removeMemberFromClass(classId, username);\n        showNotification('Member removed successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to remove member', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [removeMemberFromClass, showNotification, setActionLoading]\n  );\n\n  const handleUpdateMemberRole = useCallback(\n    async (classId, username, newRole) => {\n      setActionLoading(true);\n      try {\n        await updateMemberRole(classId, username, newRole);\n        showNotification('Member role updated successfully!', 'success');\n      } catch (err) {\n        showNotification(err.message || 'Failed to update member role', 'error');\n      } finally {\n        setActionLoading(false);\n      }\n    },\n    [updateMemberRole, showNotification, setActionLoading]\n  );\n\n  const handleOpenMemberDialog = useCallback((classId) => {\n    setSelectedClassId(classId);\n    setMemberDialogOpen(true);\n  }, []);\n\n  const handleSaveMembers = useCallback(() => {\n    setMemberDialogOpen(false);\n    setSelectedClassId(null);\n    showNotification('Members updated successfully!', 'success');\n  }, [showNotification]);\n\n  const handleCancelMemberDialog = useCallback(() => {\n    setMemberDialogOpen(false);\n    setSelectedClassId(null);\n  }, []);\n\n  const handleResetFilters = useCallback(() => {\n    setQuickFilter('all');\n    setSearchQuery('');\n    debouncedSetSearchQuery.cancel();\n    fetchClassesList({ page: 1, reset: { visibility: true } }, null, false, (err) => {\n      if (err && err.name !== 'AbortError') {\n        showNotification(err.message || 'Failed to reset filters', 'error');\n      }\n    });\n  }, [debouncedSetSearchQuery, fetchClassesList, showNotification]);\n\n  const headerData = useMemo(\n    () => ({\n      type: 'page',\n      title: 'Classes',\n      titleAriaLabel: 'Classes page',\n      shortDescription: 'Organize Your Learning',\n      tooltipDescription:\n        'Classes are focused groups within Gates for specific topics or discussions. Create or join a Class to dive into structured conversations.',\n      actions: [\n        {\n          label: 'Create Class',\n          icon: <Add />,\n          onClick: handleOpenCreate,\n          tooltip: 'Create a new class',\n          disabled: actionLoading || classesLoading || gatesLoading,\n          ariaLabel: 'Create a new class',\n        },\n      ],\n    }),\n    [handleOpenCreate, actionLoading, classesLoading, gatesLoading]\n  );\n\n  if (authLoading || isLoading) {\n    return (\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <LoadingSkeleton />\n      </AppLayout>\n    );\n  }\n\n  if (!isAuthenticated) {\n    navigate('/login', { state: { from: location.pathname } });\n    return null;\n  }\n\n  return (\n    <ErrorBoundary>\n      <AppLayout currentUser={authData} onLogout={handleLogout} token={token}>\n        <ProfileHeader user={authData} isOwnProfile={true} headerData={headerData} />\n        <EntityGrid\n          type=\"classes\"\n          items={filteredClasses}\n          cardComponent={CardMain}\n          itemKey=\"class_id\"\n          quickFilter={quickFilter}\n          setQuickFilter={setQuickFilter}\n          searchQuery={searchQuery}\n          setSearchQuery={debouncedSetSearchQuery}\n          filterOptions={CLASS_FILTER_OPTIONS}\n          onResetFilters={handleResetFilters}\n          handleFavorite={toggleFavoriteClass}\n          setEditingItem={(item) => {\n            setEditingClass(item);\n            setEditDialogOpen(true);\n          }}\n          setItemToDelete={setClassToDelete}\n          setDeleteDialogOpen={setDeleteDialogOpen}\n          handleManageMembers={handleOpenMemberDialog}\n          navigate={navigate}\n          currentUser={authData}\n          token={token}\n          onCreateNew={handleOpenCreate}\n          lastItemRef={lastClassElementRef}\n          hasMore={pagination.hasMore}\n          loading={classesLoading}\n          disabled={actionLoading || classesLoading || gatesLoading}\n        />\n        <EntityDialogs\n          type=\"classes\"\n          createOpen={createDialogOpen}\n          editOpen={editDialogOpen}\n          deleteOpen={deleteDialogOpen}\n          memberOpen={memberDialogOpen}\n          item={popupClass}\n          setItem={setPopupClass}\n          editingItem={editingClass}\n          setEditingItem={setEditingClass}\n          itemToDelete={classToDelete}\n          setItemToDelete={setClassToDelete}\n          onSaveCreate={handleCreate}\n          onSaveEdit={handleUpdate}\n          onCancelCreate={handleCancelCreate}\n          onCancelEdit={() => {\n            setEditDialogOpen(false);\n            setEditingClass(null);\n          }}\n          onConfirmDelete={handleDelete}\n          onCloseDelete={() => {\n            setDeleteDialogOpen(false);\n            setClassToDelete(null);\n          }}\n          selectedId={selectedClassId}\n          members={classes.find((c) => c.class_id === selectedClassId)?.members || []}\n          addMember={handleAddMember}\n          removeMember={handleRemoveMember}\n          updateMemberRole={handleUpdateMemberRole}\n          onSaveMembers={handleSaveMembers}\n          onCancelMembers={handleCancelMemberDialog}\n          disabled={actionLoading || classesLoading}\n          loading={actionLoading}\n          token={token}\n          gates={gates}\n        />\n      </AppLayout>\n    </ErrorBoundary>\n  );\n};\n\nClassesPage.propTypes = {\n  token: PropTypes.string,\n  authData: PropTypes.shape({\n    id: PropTypes.number,\n    username: PropTypes.string,\n    avatar: PropTypes.string,\n  }),\n  handleLogout: PropTypes.func,\n  isAuthenticated: PropTypes.bool,\n  authLoading: PropTypes.bool,\n};\n\nexport default React.memo(ClassesPage);","import React from 'react';\nimport { Box, CircularProgress } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport Filters from '../Filters/Filters';\nimport Grids from '../Grids/Grids';\nimport { containerStyles } from '../../styles/BaseStyles';\n\nconst EntityGrid = ({\n  type,\n  items,\n  cardComponent: CardComponent,\n  itemKey,\n  quickFilter,\n  setQuickFilter,\n  searchQuery,\n  setSearchQuery,\n  filterOptions,\n  onResetFilters,\n  handleFavorite,\n  setEditingItem,\n  setItemToDelete,\n  setDeleteDialogOpen,\n  handleManageMembers,\n  navigate,\n  currentUser,\n  token,\n  onCreateNew,\n  disabled,\n  profileHeader,\n  lastItemRef,\n  hasMore,\n  loading,\n}) => {\n  return (\n    <Box sx={{ ...containerStyles, maxWidth: '1500px', mx: 'auto' }}>\n      {profileHeader}\n      <Filters\n        type={type}\n        quickFilter={quickFilter}\n        setQuickFilter={setQuickFilter}\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n        filterOptions={filterOptions}\n        onReset={onResetFilters}\n      />\n      <Grids\n        items={items}\n        cardComponent={CardComponent}\n        itemKey={itemKey}\n        gridType={type}\n        handleFavorite={handleFavorite}\n        setEditingItem={setEditingItem}\n        setItemToDelete={setItemToDelete}\n        setDeleteDialogOpen={setDeleteDialogOpen}\n        handleManageMembers={handleManageMembers}\n        navigate={navigate}\n        currentUser={currentUser}\n        token={token}\n        onCreateNew={onCreateNew}\n        disabled={disabled}\n        lastItemRef={lastItemRef}\n        hasMore={hasMore}\n      />\n      {loading && hasMore && (\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\n          <CircularProgress aria-label=\"Loading more items\" />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nEntityGrid.propTypes = {\n  type: PropTypes.string.isRequired,\n  items: PropTypes.array.isRequired,\n  cardComponent: PropTypes.elementType.isRequired,\n  itemKey: PropTypes.string.isRequired,\n  quickFilter: PropTypes.string.isRequired,\n  setQuickFilter: PropTypes.func.isRequired,\n  searchQuery: PropTypes.string.isRequired,\n  setSearchQuery: PropTypes.func.isRequired,\n  filterOptions: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })\n  ).isRequired,\n  onResetFilters: PropTypes.func.isRequired,\n  handleFavorite: PropTypes.func,\n  setEditingItem: PropTypes.func,\n  setItemToDelete: PropTypes.func,\n  setDeleteDialogOpen: PropTypes.func,\n  handleManageMembers: PropTypes.func,\n  navigate: PropTypes.func.isRequired,\n  currentUser: PropTypes.object,\n  token: PropTypes.string,\n  onCreateNew: PropTypes.func,\n  disabled: PropTypes.bool,\n  profileHeader: PropTypes.node,\n  lastItemRef: PropTypes.func,\n  hasMore: PropTypes.bool,\n  loading: PropTypes.bool,\n};\n\nexport default React.memo(EntityGrid);"],"names":["ErrorBoundary","_ref","children","hasError","setHasError","useState","useCallback","error","errorInfo","console","_jsx","ClassesPage","_classes$find","navigate","useNavigate","location","useLocation","showNotification","useNotification","token","authData","handleLogout","isAuthenticated","loading","authLoading","useAuth","classes","pagination","fetchClassesList","createNewClass","updateExistingClass","deleteExistingClass","addMemberToClass","removeMemberFromClass","updateMemberRole","toggleFavoriteClass","classesLoading","classesError","useClasses","gates","fetchGatesList","gatesLoading","gatesError","useGates","createDialogOpen","setCreateDialogOpen","editDialogOpen","setEditDialogOpen","memberDialogOpen","setMemberDialogOpen","deleteDialogOpen","setDeleteDialogOpen","editingClass","setEditingClass","selectedClassId","setSelectedClassId","classToDelete","setClassToDelete","popupClass","setPopupClass","DEFAULT_CLASS","quickFilter","setQuickFilter","searchQuery","setSearchQuery","observer","useRef","lastClassElementRef","node","hasMore","current","disconnect","IntersectionObserver","entries","isIntersecting","controller","AbortController","visibility","undefined","page","signal","err","name","message","abort","observe","stableFetchClassesList","useMemo","limit","isLoading","actionLoading","setActionLoading","useEntity","debouncedSetSearchQuery","debounce","value","useEffect","filteredClasses","filterEntities","handleOpenCreate","handleCancelCreate","handleCreate","async","_popupClass$name","trim","createdClass","gate_id","gateId","class_id","handleUpdate","_editingClass$name","handleDelete","handleAddMember","classId","memberData","_cls$members","_cls$settings","cls","find","c","members","length","settings","max_members","handleRemoveMember","username","handleUpdateMemberRole","newRole","handleOpenMemberDialog","handleSaveMembers","handleCancelMemberDialog","handleResetFilters","cancel","reset","headerData","type","title","titleAriaLabel","shortDescription","tooltipDescription","actions","label","icon","Add","onClick","tooltip","disabled","ariaLabel","AppLayout","currentUser","onLogout","LoadingSkeleton","_jsxs","ProfileHeader","user","isOwnProfile","EntityGrid","items","cardComponent","CardMain","itemKey","filterOptions","CLASS_FILTER_OPTIONS","onResetFilters","handleFavorite","setEditingItem","item","setItemToDelete","handleManageMembers","onCreateNew","lastItemRef","EntityDialogs","createOpen","editOpen","deleteOpen","memberOpen","setItem","editingItem","itemToDelete","onSaveCreate","onSaveEdit","onCancelCreate","onCancelEdit","onConfirmDelete","onCloseDelete","selectedId","addMember","removeMember","onSaveMembers","onCancelMembers","state","from","pathname","React","CardComponent","profileHeader","Box","sx","containerStyles","maxWidth","mx","Filters","onReset","Grids","gridType","display","justifyContent","mt","CircularProgress"],"sourceRoot":""}