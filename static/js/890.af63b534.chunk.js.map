{"version":3,"file":"static/js/890.af63b534.chunk.js","mappings":"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","sources":["components/Forms/ResetPasswordForm/ResetPasswordForm.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  Container,\n  Typography,\n  TextField,\n  Button,\n  Paper,\n  ThemeProvider,\n  Box,\n  InputAdornment,\n  IconButton,\n  CircularProgress,\n} from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport config from \"../../../config\";\nimport { inputStyles, actionButtonStyles } from \"../../../styles/BaseStyles\";\nimport { useNotification } from \"../../../context/NotificationContext\";\n\nconst ResetPasswordForm = ({ theme, onLogin }) => {\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isResettingPassword, setIsResettingPassword] = useState(false);\n  const navigate = useNavigate();\n  const { showNotification } = useNotification();\n\n  useEffect(() => {\n    const extractToken = () => {\n      try {\n        const hash = window.location.hash || \"\";\n        const queryString = hash.includes(\"?\") ? hash.split(\"?\")[1] : \"\";\n        const hashParams = new URLSearchParams(queryString);\n        const searchParams = new URLSearchParams(window.location.search);\n        const tokenFromUrl = hashParams.get(\"token\") || searchParams.get(\"token\");\n\n        if (tokenFromUrl) {\n          setToken(tokenFromUrl);\n          setIsLoading(false);\n        } else {\n          showNotification(\n            \"No reset token found in the URL. Please check the link or request a new one.\",\n            \"error\",\n            { duration: 4000 }\n          );\n          setTimeout(() => navigate(\"/login\", { replace: true }), 4000);\n        }\n      } catch (err) {\n        showNotification(\n          \"Invalid URL format. Please check the link or request a new one.\",\n          \"error\",\n          { duration: 4000 }\n        );\n        setTimeout(() => navigate(\"/login\", { replace: true }), 4000);\n      }\n    };\n\n    extractToken();\n  }, [navigate, showNotification]);\n\n  const validateInputs = useCallback(() => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/;\n\n    if (!newPassword) return \"New password is required\";\n    if (!passwordRegex.test(newPassword))\n      return \"Password must contain at least 8 characters, uppercase, lowercase, and a number\";\n    if (newPassword.length > 128) return \"Password cannot exceed 128 characters\";\n    if (newPassword !== confirmPassword) return \"Passwords do not match\";\n    if (!token) return \"Reset token is missing\";\n    return null;\n  }, [newPassword, confirmPassword, token]);\n\n  const handleSubmit = useCallback(\n    async (e) => {\n      e.preventDefault();\n      setIsSubmitting(true);\n      setIsResettingPassword(true);\n\n      const validationError = validateInputs();\n      if (validationError) {\n        showNotification(validationError, \"error\");\n        setIsSubmitting(false);\n        setIsResettingPassword(false);\n        return;\n      }\n\n      try {\n        const response = await axios.post(`${config.REACT_APP_HUB_API_URL}/api/v1/auth/set-password`, {\n          token,\n          newPassword,\n        });\n        const { token: jwtToken, profile } = response.data;\n        if (!jwtToken || !profile) {\n          throw new Error(\"Invalid response: Missing token or profile\");\n        }\n        localStorage.setItem(\"token\", jwtToken);\n        onLogin(jwtToken, profile);\n        showNotification(\"Password successfully changed! Redirecting...\", \"success\");\n        setTimeout(() => navigate(\"/home\", { replace: true }), 2000);\n      } catch (err) {\n        console.error(\"Error during reset password:\", err.response?.data || err);\n        const errorMessage =\n          err.response?.data?.errors?.[0] ||\n          err.response?.data?.message ||\n          \"Network error, please try again\";\n        showNotification(errorMessage, \"error\");\n        setIsSubmitting(false);\n        setIsResettingPassword(false);\n      }\n    },\n    [newPassword, confirmPassword, token, navigate, onLogin, showNotification, validateInputs]\n  );\n\n  const handleBackToLogin = useCallback(() => navigate(\"/login\", { replace: true }), [navigate]);\n\n  const handleKeyDown = useCallback(\n    (e, callback) => {\n      if (e.key === \"Enter\" && !isSubmitting) {\n        e.preventDefault();\n        callback();\n      }\n    },\n    [isSubmitting]\n  );\n\n  if (isLoading || isResettingPassword) {\n    return (\n      <ThemeProvider theme={theme}>\n        <Container\n          maxWidth=\"sm\"\n          sx={{\n            minHeight: \"100vh\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <Box sx={{ textAlign: \"center\" }} aria-live=\"polite\" aria-busy=\"true\">\n            <CircularProgress aria-label=\"Loading\" sx={{ mb: 2 }} />\n            <Typography variant=\"body1\" sx={{ color: \"text.primary\" }}>\n              {isLoading ? \"Loading reset password form…\" : \"Resetting password…\"}\n            </Typography>\n          </Box>\n        </Container>\n      </ThemeProvider>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container\n        maxWidth=\"sm\"\n        sx={{\n          minHeight: \"100vh\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Paper\n          elevation={6}\n          sx={{\n            p: theme.spacing(5),\n            borderRadius: theme.shape.borderRadiusMedium,\n            backgroundColor: \"background.paper\",\n            boxShadow: \"0 8px 24px rgba(0, 0, 0, 0.1)\",\n            width: \"100%\",\n            maxWidth: theme.custom.loginPaperMaxWidth,\n            textAlign: \"center\",\n          }}\n        >\n          <Box sx={{ textAlign: \"center\", mb: theme.spacing(3) }}>\n            <Typography\n              variant=\"h4\"\n              sx={{ color: \"text.primary\", fontWeight: 600 }}\n            >\n              Create New Password\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              sx={{ color: \"text.secondary\", mt: 1 }}\n            >\n              Enter your new password to continue\n            </Typography>\n          </Box>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: 2, textAlign: \"left\" }}\n            aria-label=\"Reset password form\"\n          >\n            <TextField\n              label=\"New Password\"\n              type={showNewPassword ? \"text\" : \"password\"}\n              fullWidth\n              margin=\"normal\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              onKeyDown={(e) => handleKeyDown(e, () => handleSubmit(e))}\n              InputProps={{\n                notched: false,\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      name=\"password-visibility\"\n                      onClick={() => setShowNewPassword(!showNewPassword)}\n                      edge=\"end\"\n                      aria-label={showNewPassword ? \"Hide new password\" : \"Show new password\"}\n                      sx={{ color: \"text.primary\" }}\n                    >\n                      {showNewPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              sx={inputStyles}\n              required\n            />\n            <TextField\n              label=\"Confirm Password\"\n              type={showConfirmPassword ? \"text\" : \"password\"}\n              fullWidth\n              margin=\"normal\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              onKeyDown={(e) => handleKeyDown(e, () => handleSubmit(e))}\n              InputProps={{\n                notched: false,\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      edge=\"end\"\n                      aria-label={showConfirmPassword ? \"Hide confirm password\" : \"Show confirm password\"}\n                      sx={{ color: \"text.primary\" }}\n                    >\n                      {showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              sx={inputStyles}\n              required\n            />\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                mt: theme.spacing(3),\n                gap: theme.spacing(3),\n                alignItems: \"center\",\n              }}\n            >\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                disabled={isSubmitting}\n                fullWidth\n                sx={actionButtonStyles}\n                aria-label=\"Change password\"\n              >\n                {isSubmitting ? \"Changing Password...\" : \"Change Password\"}\n              </Button>\n              <Button\n                variant=\"text\"\n                onClick={handleBackToLogin}\n                sx={{\n                  color: \"text.primary\",\n                  textTransform: \"none\",\n                  fontSize: \"0.875rem\",\n                  \"&:hover\": { textDecoration: \"underline\" },\n                }}\n                aria-label=\"Back to login\"\n              >\n                Back to Login\n              </Button>\n            </Box>\n          </Box>\n        </Paper>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default ResetPasswordForm;"],"names":["_ref","theme","onLogin","newPassword","setNewPassword","useState","confirmPassword","setConfirmPassword","token","setToken","showNewPassword","setShowNewPassword","showConfirmPassword","setShowConfirmPassword","isSubmitting","setIsSubmitting","isLoading","setIsLoading","isResettingPassword","setIsResettingPassword","navigate","useNavigate","showNotification","useNotification","useEffect","extractToken","hash","window","location","queryString","includes","split","hashParams","URLSearchParams","searchParams","search","tokenFromUrl","get","duration","setTimeout","replace","err","validateInputs","useCallback","test","length","handleSubmit","async","e","preventDefault","validationError","response","axios","post","config","REACT_APP_HUB_API_URL","jwtToken","profile","data","Error","localStorage","setItem","_err$response","_err$response2","_err$response2$data","_err$response2$data$e","_err$response3","_err$response3$data","console","error","errorMessage","errors","message","handleBackToLogin","handleKeyDown","callback","key","_jsx","ThemeProvider","children","Container","maxWidth","sx","minHeight","display","alignItems","justifyContent","_jsxs","Box","textAlign","CircularProgress","mb","Typography","variant","color","Paper","elevation","p","spacing","borderRadius","shape","borderRadiusMedium","backgroundColor","boxShadow","width","custom","loginPaperMaxWidth","fontWeight","mt","component","onSubmit","noValidate","TextField","label","type","fullWidth","margin","value","onChange","target","onKeyDown","InputProps","notched","endAdornment","InputAdornment","position","IconButton","name","onClick","edge","Visibility","VisibilityOff","inputStyles","required","flexDirection","gap","Button","disabled","actionButtonStyles","textTransform","fontSize","textDecoration"],"sourceRoot":""}