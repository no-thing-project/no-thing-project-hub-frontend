{"version":3,"file":"static/js/890.6988b803.chunk.js","mappings":"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","sources":["components/Forms/ResetPasswordForm/ResetPasswordForm.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  Container,\n  Typography,\n  TextField,\n  Button,\n  Paper,\n  ThemeProvider,\n  Box,\n  InputAdornment,\n  IconButton,\n  CircularProgress,\n} from \"@mui/material\";\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport config from \"../../../config\";\nimport { inputStyles, actionButtonStyles } from \"../../../styles/BaseStyles\";\nimport { useNotification } from \"../../../context/NotificationContext\";\n\nconst ResetPasswordForm = ({ theme, onLogin }) => {\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [token, setToken] = useState(\"\");\n  const [showNewPassword, setShowNewPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigate = useNavigate();\n  const { showNotification } = useNotification();\n\n  useEffect(() => {\n    const extractToken = () => {\n      try {\n        // Handle hash-based URL (e.g., #/reset-password?token=...)\n        const hash = window.location.hash || \"\";\n        const queryString = hash.includes(\"?\") ? hash.split(\"?\")[1] : \"\";\n        const hashParams = new URLSearchParams(queryString);\n        const searchParams = new URLSearchParams(window.location.search);\n        const tokenFromUrl = hashParams.get(\"token\") || searchParams.get(\"token\");\n\n        if (tokenFromUrl) {\n          setToken(tokenFromUrl);\n          setIsLoading(false);\n        } else {\n          showNotification(\n            \"No reset token found in the URL. Please check the link or request a new one.\",\n            \"error\",\n            { duration: 4000 }\n          );\n          setTimeout(() => navigate(\"/login\", { replace: true }), 4000);\n        }\n      } catch (err) {\n        showNotification(\n          \"Invalid URL format. Please check the link or request a new one.\",\n          \"error\",\n          { duration: 4000 }\n        );\n        setTimeout(() => navigate(\"/login\", { replace: true }), 4000);\n      }\n    };\n\n    extractToken();\n  }, [navigate, showNotification]);\n\n  const validateInputs = () => {\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/;\n\n    if (!newPassword) return \"New password is required\";\n    if (!passwordRegex.test(newPassword))\n      return \"Password must contain at least 8 characters, uppercase, lowercase, and a number\";\n    if (newPassword.length > 128) return \"Password cannot exceed 128 characters\";\n    if (newPassword !== confirmPassword) return \"Passwords do not match\";\n    if (!token) return \"Reset token is missing\";\n    return null;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    const validationError = validateInputs();\n    if (validationError) {\n      showNotification(validationError, \"error\");\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      const response = await axios.post(`${config.REACT_APP_HUB_API_URL}/api/v1/auth/set-password`, {\n        token,\n        newPassword,\n      });\n      const {token: jwtToken, profile } = response.data;\n      if (!jwtToken || !profile) {\n        throw new Error(\"Invalid response: Missing token or profile\");\n      }\n      localStorage.setItem(\"token\", jwtToken);\n      onLogin(jwtToken, profile);\n      showNotification(\"Password successfully changed! Logging you in...\", \"success\");\n      setTimeout(() => navigate(\"/home\", { replace: true }), 2000);\n    } catch (err) {\n      console.error(\"Error during reset password:\", err.response?.data || err);\n      const errorMessage =\n        err.response?.data?.errors?.[0] ||\n        err.response?.data?.message ||\n        \"Network error, please try again\";\n      showNotification(errorMessage, \"error\");\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleBackToLogin = () => navigate(\"/login\", { replace: true });\n\n  if (isLoading) {\n    return (\n      <ThemeProvider theme={theme}>\n        <Container\n          maxWidth=\"sm\"\n          sx={{\n            minHeight: \"100vh\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <CircularProgress aria-label=\"Loading reset password form\" />\n        </Container>\n      </ThemeProvider>\n    );\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Container\n        maxWidth=\"sm\"\n        sx={{\n          minHeight: \"100vh\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Paper\n          elevation={6}\n          sx={{\n            p: theme.spacing(5),\n            borderRadius: theme.shape.borderRadiusMedium,\n            backgroundColor: \"background.paper\",\n            boxShadow: \"0 8px 24px rgba(0, 0, 0, 0.1)\",\n            width: \"100%\",\n            maxWidth: theme.custom.loginPaperMaxWidth,\n            textAlign: \"center\",\n          }}\n        >\n          <Box sx={{ textAlign: \"center\", mb: theme.spacing(3) }}>\n            <Typography\n              variant=\"h4\"\n              sx={{ color: \"text.primary\", fontWeight: 600 }}\n            >\n              Create New Password\n            </Typography>\n            <Typography\n              variant=\"subtitle1\"\n              sx={{ color: \"text.secondary\", mt: 1 }}\n            >\n              Enter your new password to continue\n            </Typography>\n          </Box>\n          <Box\n            component=\"form\"\n            onSubmit={handleSubmit}\n            noValidate\n            sx={{ mt: 2, textAlign: \"left\" }}\n            aria-label=\"Reset password form\"\n          >\n            <TextField\n              label=\"New Password\"\n              type={showNewPassword ? \"text\" : \"password\"}\n              fullWidth\n              margin=\"normal\"\n              value={newPassword}\n              onChange={(e) => setNewPassword(e.target.value)}\n              InputProps={{\n                notched: false,\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={() => setShowNewPassword(!showNewPassword)}\n                      edge=\"end\"\n                      aria-label={showNewPassword ? \"Hide new password\" : \"Show new password\"}\n                      sx={{ color: \"text.primary\" }}\n                    >\n                      {showNewPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              sx={inputStyles}\n              required\n            />\n            <TextField\n              label=\"Confirm Password\"\n              type={showConfirmPassword ? \"text\" : \"password\"}\n              fullWidth\n              margin=\"normal\"\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              InputProps={{\n                notched: false,\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                      edge=\"end\"\n                      aria-label={showConfirmPassword ? \"Hide confirm password\" : \"Show confirm password\"}\n                      sx={{ color: \"text.primary\" }}\n                    >\n                      {showConfirmPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              sx={inputStyles}\n              required\n            />\n            <Box\n              sx={{\n                display: \"flex\",\n                flexDirection: \"column\",\n                mt: theme.spacing(3),\n                gap: theme.spacing(3),\n                alignItems: \"center\",\n              }}\n            >\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                disabled={isSubmitting}\n                fullWidth\n                sx={actionButtonStyles}\n                aria-label=\"Change password\"\n              >\n                {isSubmitting ? \"Changing Password...\" : \"Change Password\"}\n              </Button>\n              <Button\n                variant=\"text\"\n                onClick={handleBackToLogin}\n                sx={{\n                  color: \"text.primary\",\n                  textTransform: \"none\",\n                  fontSize: \"0.875rem\",\n                  \"&:hover\": { textDecoration: \"underline\" },\n                }}\n                aria-label=\"Back to login\"\n              >\n                Back to Login\n              </Button>\n            </Box>\n          </Box>\n        </Paper>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default ResetPasswordForm;"],"names":["_ref","theme","onLogin","newPassword","setNewPassword","useState","confirmPassword","setConfirmPassword","token","setToken","showNewPassword","setShowNewPassword","showConfirmPassword","setShowConfirmPassword","isSubmitting","setIsSubmitting","isLoading","setIsLoading","navigate","useNavigate","showNotification","useNotification","useEffect","extractToken","hash","window","location","queryString","includes","split","hashParams","URLSearchParams","searchParams","search","tokenFromUrl","get","duration","setTimeout","replace","err","_jsx","ThemeProvider","children","Container","maxWidth","sx","minHeight","display","alignItems","justifyContent","CircularProgress","_jsxs","Paper","elevation","p","spacing","borderRadius","shape","borderRadiusMedium","backgroundColor","boxShadow","width","custom","loginPaperMaxWidth","textAlign","Box","mb","Typography","variant","color","fontWeight","mt","component","onSubmit","async","e","preventDefault","validationError","test","length","response","axios","post","config","REACT_APP_HUB_API_URL","jwtToken","profile","data","Error","localStorage","setItem","_err$response","_err$response2","_err$response2$data","_err$response2$data$e","_err$response3","_err$response3$data","console","error","errorMessage","errors","message","noValidate","TextField","label","type","fullWidth","margin","value","onChange","target","InputProps","notched","endAdornment","InputAdornment","position","IconButton","onClick","edge","Visibility","VisibilityOff","inputStyles","required","flexDirection","gap","Button","disabled","actionButtonStyles","handleBackToLogin","textTransform","fontSize","textDecoration"],"sourceRoot":""}